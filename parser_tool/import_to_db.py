#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ Django –ë–î
"""

import os
import sys
import django
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'astrocoins.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ Django
from core.models import User, Group, City, School, Course, Parent, Profile
from django.contrib.auth.hashers import make_password
from django.db import transaction
from django.contrib.auth import get_user_model

User = get_user_model()

class DatabaseImporter:
    """–ò–º–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ Django –ë–î"""
    
    def __init__(self, json_file_path):
        self.json_file_path = json_file_path
        self.data = None
        self.teacher_user = None  # AlexanderX
        self.curator_user = None  # adminVld
        self.default_city = None
        self.default_school = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'groups_created': 0,
            'courses_created': 0,
            'students_created': 0,
            'students_updated': 0,
            'errors': []
        }
    
    def load_json_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.json_file_path, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
            
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω JSON —Ñ–∞–π–ª: {self.json_file_path}")
            print(f"üìä –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(self.data.get('students', []))}")
            print(f"üìä –ì—Ä—É–ø–ø: {len(self.data.get('groups', []))}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
            return False
    
    def setup_basic_data(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –≥–æ—Ä–æ–¥, —à–∫–æ–ª—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º/—Å–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥
            self.default_city, created = City.objects.get_or_create(
                name="–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
                defaults={'description': '–ì–æ—Ä–æ–¥ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'}
            )
            if created:
                print(f"üèôÔ∏è –°–æ–∑–¥–∞–Ω –≥–æ—Ä–æ–¥: {self.default_city.name}")
            else:
                print(f"üèôÔ∏è –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥: {self.default_city.name}")
            
            # –ù–∞—Ö–æ–¥–∏–º/—Å–æ–∑–¥–∞–µ–º —à–∫–æ–ª—É
            self.default_school, created = School.objects.get_or_create(
                name="–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
                city=self.default_city,
                defaults={
                    'address': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
                    'description': '–®–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞'
                }
            )
            if created:
                print(f"üè´ –°–æ–∑–¥–∞–Ω–∞ —à–∫–æ–ª–∞: {self.default_school.name}")
            else:
                print(f"üè´ –ù–∞–π–¥–µ–Ω–∞ —à–∫–æ–ª–∞: {self.default_school.name}")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è AlexanderX
            try:
                self.teacher_user = User.objects.get(username='AlexanderX')
                print(f"üë®‚Äçüè´ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {self.teacher_user.username}")
            except User.DoesNotExist:
                print(f"‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å AlexanderX –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä–∞—Ç–æ—Ä–∞ adminVld
            try:
                self.curator_user = User.objects.get(username='adminVld')
                print(f"üë®‚Äçüíº –ù–∞–π–¥–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä: {self.curator_user.username}")
            except User.DoesNotExist:
                print(f"‚ùå –ö—É—Ä–∞—Ç–æ—Ä adminVld –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.stats['errors'].append(f"Setup error: {e}")
            return False
    
    def create_courses_and_groups(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫—É—Ä—Å—ã –∏ –≥—Ä—É–ø–ø—ã –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏ –≥—Ä—É–ø–ø...")
            
            unique_groups = self.data.get('groups', [])
            
            for group_name in unique_groups:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã
                    course, created = Course.objects.get_or_create(
                        name=group_name,
                        defaults={
                            'description': f'–ö—É—Ä—Å {group_name}',
                            'duration_weeks': 36,  # –£—á–µ–±–Ω—ã–π –≥–æ–¥
                            'price': 5000,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞
                            'max_students': 12
                        }
                    )
                    
                    if created:
                        print(f"üìñ –°–æ–∑–¥–∞–Ω –∫—É—Ä—Å: {course.name}")
                        self.stats['courses_created'] += 1
                    else:
                        print(f"üìñ –ù–∞–π–¥–µ–Ω –∫—É—Ä—Å: {course.name}")
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫—É—Ä—Å–∞
                    group, created = Group.objects.get_or_create(
                        name=group_name,
                        course=course,
                        defaults={
                            'school': self.default_school,
                            'teacher': self.teacher_user,
                            'curator': self.curator_user,
                            'start_date': datetime.now().date(),
                            'max_students': 12,
                            'is_active': True
                        }
                    )
                    
                    if created:
                        print(f"üë• –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.name}")
                        self.stats['groups_created'] += 1
                    else:
                        print(f"üë• –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.name}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if group.teacher != self.teacher_user:
                            group.teacher = self.teacher_user
                        if group.curator != self.curator_user:
                            group.curator = self.curator_user
                        group.save()
                
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_name}: {e}"
                    print(f"‚ùå {error_msg}")
                    self.stats['errors'].append(error_msg)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏ –≥—Ä—É–ø–ø: {e}")
            self.stats['errors'].append(f"Courses/Groups error: {e}")
            return False
    
    def create_students(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"\nüë®‚Äçüéì –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
            
            students_data = self.data.get('students', [])
            
            for student_data in students_data:
                try:
                    first_name = student_data.get('first_name', '').strip()
                    last_name = student_data.get('last_name', '').strip()
                    login = student_data.get('login', '').strip()
                    password = student_data.get('password', '123456')
                    balance = student_data.get('balance', 0)
                    group_name = student_data.get('group_name', '').strip()
                    
                    if not first_name or not last_name or not login:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {student_data}")
                        continue
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                    try:
                        group = Group.objects.get(name=group_name)
                    except Group.DoesNotExist:
                        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {first_name} {last_name}")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å—Ç—É–¥–µ–Ω—Ç–∞
                    user, created = User.objects.get_or_create(
                        username=login,
                        defaults={
                            'first_name': first_name,
                            'last_name': last_name,
                            'email': f"{login}@algoritmika.local",
                            'password': make_password(password),
                            'is_active': True,
                            'user_type': 'student'
                        }
                    )
                    
                    if created:
                        print(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
                        self.stats['students_created'] += 1
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        user.first_name = first_name
                        user.last_name = last_name
                        user.user_type = 'student'
                        user.save()
                        print(f"üë§ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
                        self.stats['students_updated'] += 1
                    
                    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
                    profile, created = Profile.objects.get_or_create(
                        user=user,
                        defaults={
                            'balance': balance,
                            'city': self.default_city,
                            'school': self.default_school
                        }
                    )
                    
                    if not created:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                        profile.balance = balance
                        profile.city = self.default_city
                        profile.school = self.default_school
                        profile.save()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
                    if user not in group.students.all():
                        group.students.add(user)
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {group.name}")
                
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_data}: {e}"
                    print(f"‚ùå {error_msg}")
                    self.stats['errors'].append(error_msg)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
            self.stats['errors'].append(f"Students error: {e}")
            return False
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞"""
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:")
        print(f"   üìñ –ö—É—Ä—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {self.stats['courses_created']}")
        print(f"   üë• –ì—Ä—É–ø–ø —Å–æ–∑–¥–∞–Ω–æ: {self.stats['groups_created']}")
        print(f"   üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {self.stats['students_created']}")
        print(f"   üë§ –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.stats['students_updated']}")
        
        if self.stats['errors']:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(self.stats['errors'])}):")
            for error in self.stats['errors'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   - {error}")
            if len(self.stats['errors']) > 5:
                print(f"   ... –∏ –µ—â–µ {len(self.stats['errors']) - 5} –æ—à–∏–±–æ–∫")
        else:
            print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫!")
    
    def run_import(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Django –ë–î...")
        print(f"=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
        if not self.load_json_data():
            return False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not self.setup_basic_data():
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
        try:
            with transaction.atomic():
                # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã –∏ –≥—Ä—É–ø–ø—ã
                if not self.create_courses_and_groups():
                    raise Exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏ –≥—Ä—É–ø–ø")
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                if not self.create_students():
                    raise Exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
                
                print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.print_statistics()
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞): {e}")
            self.stats['errors'].append(f"Transaction error: {e}")
            self.print_statistics()
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import glob
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π JSON —Ñ–∞–π–ª
    json_files = glob.glob("algoritmika_data_*.json")
    if not json_files:
        print("‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä.")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
    latest_file = max(json_files, key=os.path.getctime)
    print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {latest_file}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input(f"\n‚ùì –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_file} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N): ")
    if confirm.lower() not in ['y', 'yes', '–¥–∞']:
        print("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
    importer = DatabaseImporter(latest_file)
    success = importer.run_import()
    
    if success:
        print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ –∞–¥–º–∏–Ω–∫–µ")
        print(f"2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –±–∞–ª–∞–Ω—Å")
        print(f"3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        print(f"\n‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")


if __name__ == "__main__":
    main()
