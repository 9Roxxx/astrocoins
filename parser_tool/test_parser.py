#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ algoritmika25.ru
"""

try:
    from algoritmika_parser_standalone import AlgoritmikaParserStandalone as AlgoritmikaParser
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º standalone –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞ (–±–µ–∑ Django)")
except ImportError:
    from algoritmika_parser import AlgoritmikaParser
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞ (—Å Django)")

def test_login():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_email = "depressed7kk1d@vk.com"
    default_password = "123456"
    
    email = input(f"–í–≤–µ–¥–∏—Ç–µ email —É—á–∏—Ç–µ–ª—è ({default_email}): ").strip()
    if not email:
        email = default_email
        
    password = input(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å ({default_password}): ").strip()
    if not password:
        password = default_password
    
    parser = AlgoritmikaParser()
    success = parser.login(email, password)
    
    if success:
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return parser, email, password
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return None, None, None

def test_groups_parsing(parser, city="–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"):
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø"""
    print(f"\nüìö –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}...")
    
    groups = parser.parse_groups(city)
    
    if groups:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø:")
        if isinstance(groups, list) and groups:
            for i, group in enumerate(groups[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                if isinstance(group, str):
                    print(f"   {i}. {group}")
                elif isinstance(group, dict):
                    print(f"   {i}. {group.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {len(group.get('students', []))} —É—á–µ–Ω–∏–∫–æ–≤")
                    if group.get('students'):
                        print(f"      –ü–µ—Ä–≤—ã–µ —É—á–µ–Ω–∏–∫–∏: {', '.join(group['students'][:3])}{'...' if len(group['students']) > 3 else ''}")
        else:
            print(f"   –î–∞–Ω–Ω—ã–µ: {groups}")
        return groups
    else:
        print("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []

def test_export_data(parser):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
    print("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON...")
    
    filename = parser.export_to_json()
    if filename:
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        debug_info = parser.get_debug_info()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {debug_info['parsed_counts']['students']}")
        print(f"   - –ì—Ä—É–ø–ø: {debug_info['parsed_counts']['groups']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        students = parser.parsed_data['students']
        if students:
            print(f"\nüë®‚Äçüéì –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
            for i, student in enumerate(students[:3]):
                print(f"   {i+1}. {student['first_name']} {student['last_name']}")
                print(f"      –õ–æ–≥–∏–Ω: {student['login']}")
                print(f"      –ë–∞–ª–∞–Ω—Å: {student['balance']} –∫–æ–∏–Ω–æ–≤")
                print(f"      –ì—Ä—É–ø–ø–∞: {student['group_name']}")
        
        groups = parser.parsed_data['groups']
        if groups:
            print(f"\nüìñ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
            for i, group in enumerate(groups[:5]):
                print(f"   {i+1}. {group}")
        
        return filename
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return None

def test_full_import():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    parser, username, password = test_login()
    if not parser:
        return
    
    # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    city = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫): ").strip()
    if not city:
        city = "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
    groups = test_groups_parsing(parser, city)
    if not groups:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
    print(f"\nüìã –ì–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É:")
    print(f"   - –£—á–∏—Ç–µ–ª—å: {username}")
    print(f"   - –ì–æ—Ä–æ–¥: {city}")
    print(f"   - –ì—Ä—É–ø–ø: {len(groups)}")
    total_students = sum(len(group['students']) for group in groups)
    print(f"   - –£—á–µ–Ω–∏–∫–æ–≤: {total_students}")
    
    confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N): ")
    if confirm.lower() not in ['y', 'yes', '–¥–∞']:
        print("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    print("\nüíæ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    success = parser.run_full_import(username, password, city)
    
    if success:
        print("\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É —Å–∞–π—Ç–∞")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("3. –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ —É—á–∏—Ç–µ–ª—è–º")
        print("4. –°–æ–æ–±—â–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞–º –∏—Ö –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏")
    else:
        print("\n‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

def debug_html():
    """–û—Ç–ª–∞–¥–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    parser, _, _ = test_login()
    if not parser:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø
    try:
        response = parser.session.get(f"{parser.base_url}/groups/")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open("debug_groups_page.html", "w", encoding="utf-8") as f:
            f.write(response.text)
        
        print("‚úÖ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_groups_page.html")
        print("üìù –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
        print("üîß –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ algoritmika_parser.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML: {str(e)}")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("üîÑ –ü–∞—Ä—Å–µ—Ä algoritmika25.ru")
    print("=" * 30)
    print("1. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("2. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø") 
    print("3. –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    print("4. –û—Ç–ª–∞–¥–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    print("0. –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-4): ")
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                test_login()
            elif choice == "2":
                parser, _, _ = test_login()
                if parser:
                    city = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫): ") or "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"
                    test_groups_parsing(parser, city)
            elif choice == "3":
                # –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤ JSON
                parser, username, password = test_login()
                if parser:
                    city = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫): ") or "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"
                    
                    print(f"\nüìö –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}...")
                    groups = parser.parse_groups(city)
                    
                    print(f"\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
                    filename = test_export_data(parser)
                    
                    if filename:
                        print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                    else:
                        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
            elif choice == "4":
                debug_html()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
