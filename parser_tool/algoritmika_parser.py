#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å algoritmika25.ru –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
"""

import os
import sys
import django
import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime, date
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'astrocoins.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ Django
from core.models import User, Group, City, School, Course, Parent, Profile
from django.contrib.auth.hashers import make_password
from django.db import transaction


class AlgoritmikaParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è algoritmika25.ru"""
    
    def __init__(self, base_url="https://algoritmika25.ru"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # URLs –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–∞–π—Ç–∞
        self.login_url = f"{self.base_url}/login"  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ /login
        self.groups_url = f"{self.base_url}/admin"  # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ /admin –¥–ª—è –≥—Ä—É–ø–ø
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.city_mapping = {
            # –ë—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ –∏–º–µ–Ω–∞–º —É—á–∏—Ç–µ–ª–µ–π –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º
            'default': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'  # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.stats = {
            'teachers': 0,
            'students': 0,
            'groups': 0,
            'parents': 0,
            'errors': []
        }
    
    def login(self, email, password):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ email"""
        try:
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {email}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            login_page = self.session.get(self.login_url)
            soup = BeautifulSoup(login_page.content, 'html.parser')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω (Laravel –∏—Å–ø–æ–ª—å–∑—É–µ—Ç _token)
            csrf_token = soup.find('input', {'name': '_token'})
            if csrf_token:
                csrf_token = csrf_token.get('value')
                print(f"üîë –ù–∞–π–¥–µ–Ω _token: {csrf_token[:20]}...")
            else:
                print("‚ö†Ô∏è _token –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –∏ –µ—ë –ø–æ–ª—è
            form = soup.find('form')
            if form:
                print(f"üìù –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞")
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                inputs = form.find_all('input')
                print(f"üîç –ü–æ–ª—è —Ñ–æ—Ä–º—ã:")
                for inp in inputs:
                    name = inp.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    input_type = inp.get('type', 'text')
                    placeholder = inp.get('placeholder', '')
                    print(f"   - {name} (type: {input_type}) placeholder: '{placeholder}'")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–æ—Ä–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open('debug_login_form.html', 'w', encoding='utf-8') as f:
                f.write(login_page.text)
            print("üíæ HTML —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_login_form.html")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            login_data = {
                'login': email,  # –ü–æ–ª–µ login –ø—Ä–∏–Ω–∏–º–∞–µ—Ç email
                'password': password,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º Laravel CSRF —Ç–æ–∫–µ–Ω
            if csrf_token:
                login_data['_token'] = csrf_token
            else:
                print("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞")
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
            for key, value in login_data.items():
                if key == 'password':
                    print(f"   - {key}: {'*' * len(str(value))}")
                else:
                    print(f"   - {key}: {value}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            response = self.session.post(self.login_url, data=login_data, allow_redirects=True)
            
            print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
            print(f"üîó URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞: {response.url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
                if '–≥—Ä—É–ø–ø—ã' in response.text.lower() or 'groups' in response.text.lower():
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {email}")
                    return True
                elif 'error' in response.text.lower() or '–æ—à–∏–±–∫–∞' in response.text.lower():
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    return False
                else:
                    print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
                    return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            self.stats['errors'].append(f"Login error: {str(e)}")
            return False
    
    def get_or_create_city(self, city_name):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥"""
        city, created = City.objects.get_or_create(
            name=city_name,
            defaults={'description': f'–ì–æ—Ä–æ–¥ {city_name}'}
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –≥–æ—Ä–æ–¥: {city_name}")
        return city
    
    def get_or_create_school(self, school_name, city):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —à–∫–æ–ª—É"""
        school, created = School.objects.get_or_create(
            name=school_name,
            city=city,
            defaults={
                'director': '–ù–µ —É–∫–∞–∑–∞–Ω',
                'address': f'{city.name}, —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
                'phone': '–ù–µ —É–∫–∞–∑–∞–Ω'
            }
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —à–∫–æ–ª–∞: {school_name} –≤ –≥–æ—Ä–æ–¥–µ {city.name}")
        return school
    
    def parse_groups(self, teacher_city_name="–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        try:
            print("\nüìö –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é (—É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã)
            # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞ /admin —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥—Ä—É–ø–ø—ã
            groups_page = self.session.get(self.groups_url)
            
            print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø: {groups_page.status_code}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            with open('debug_groups_page.html', 'w', encoding='utf-8') as f:
                f.write(groups_page.text)
            print("üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_groups_page.html")
            
            soup = BeautifulSoup(groups_page.content, 'html.parser')
            city = self.get_or_create_city(teacher_city_name)
            
            # –ò—â–µ–º –≥—Ä—É–ø–ø—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            group_elements = []
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –∏—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –≥—Ä—É–ø–ø–∞–º–∏
            possible_selectors = [
                'div.group-item',
                'div.group-card', 
                'div.group',
                '.group',
                'tr.group',
                'li.group',
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'div[class*="group"]',
                'div[class*="–∫–ª–∞—Å—Å"]',
                'div[class*="lesson"]',
                'tr[class*="group"]'
            ]
            
            for selector in possible_selectors:
                elements = soup.select(selector)
                if elements:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector} ({len(elements)} —à—Ç.)")
                    group_elements = elements
                    break
            
            if not group_elements:
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–ø–∏—Å–∫–∏
                tables = soup.find_all('table')
                if tables:
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                    # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é —Ç–∞–±–ª–∏—Ü—É
                    biggest_table = max(tables, key=lambda t: len(t.find_all('tr')))
                    group_elements = biggest_table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å {len(group_elements)} —Å—Ç—Ä–æ–∫–∞–º–∏")
                
                if not group_elements:
                    # –ò—â–µ–º –ª—é–±—ã–µ —Å–ø–∏—Å–∫–∏
                    lists = soup.find_all(['ul', 'ol'])
                    for ul in lists:
                        items = ul.find_all('li')
                        if len(items) > 2:  # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –±–æ–ª—å—à–µ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            group_elements = items
                            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å {len(items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                            break
            
            if not group_elements:
                print("‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML...")
                # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                titles = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
                print("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
                for title in titles[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    print(f"   - {title.name}: {title.get_text(strip=True)}")
                
                # –ò—â–µ–º —Å–ª–æ–≤–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–∞–º–∏
                text = soup.get_text().lower()
                group_keywords = ['–≥—Ä—É–ø–ø–∞', '–∫–ª–∞—Å—Å', '–∫—É—Ä—Å', '—É—Ä–æ–∫', '–∑–∞–Ω—è—Ç–∏–µ']
                found_keywords = [kw for kw in group_keywords if kw in text]
                if found_keywords:
                    print(f"üîç –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
                
                return []
            
            groups_data = []
            for group_elem in group_elements:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
                    group_name = group_elem.find('h6')  # –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
                    if group_name:
                        group_name = group_name.text.strip()
                        
                        group_data = {
                            'name': group_name,
                            'city': city,
                            'students': []
                        }
                        
                        # –ò—â–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
                        students = group_elem.find_all('span', class_='student-name')  # –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ
                        for student_elem in students:
                            student_name = student_elem.text.strip()
                            group_data['students'].append(student_name)
                        
                        groups_data.append(group_data)
                        print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name} ({len(group_data['students'])} —É—á–µ–Ω–∏–∫–æ–≤)")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥—Ä—É–ø–ø—ã: {str(e)}")
                    self.stats['errors'].append(f"Group parsing error: {str(e)}")
            
            return groups_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥—Ä—É–ø–ø: {str(e)}")
            self.stats['errors'].append(f"Groups parsing error: {str(e)}")
            return []
    
    def parse_students(self, group_name=None):
        """–ü–∞—Ä—Å–∏–Ω–≥ —É—á–µ–Ω–∏–∫–æ–≤"""
        try:
            print("\nüë• –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —É—á–µ–Ω–∏–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É—á–µ–Ω–∏–∫–∞–º–∏
            students_page = self.session.get(f"{self.base_url}/user-management/")  # –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ URL
            soup = BeautifulSoup(students_page.content, 'html.parser')
            
            # –ò—â–µ–º —É—á–µ–Ω–∏–∫–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            student_elements = soup.find_all('div', class_='student-item')
            
            students_data = []
            for student_elem in student_elements:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
                    name_elem = student_elem.find('h6')
                    email_elem = student_elem.find('small')
                    
                    if name_elem:
                        full_name = name_elem.text.strip()
                        email = email_elem.text.strip() if email_elem else ""
                        
                        student_data = {
                            'full_name': full_name,
                            'email': email,
                            'group': group_name
                        }
                        
                        students_data.append(student_data)
                        print(f"üë§ –ù–∞–π–¥–µ–Ω —É—á–µ–Ω–∏–∫: {full_name}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É—á–µ–Ω–∏–∫–∞: {str(e)}")
            
            return students_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É—á–µ–Ω–∏–∫–æ–≤: {str(e)}")
            self.stats['errors'].append(f"Students parsing error: {str(e)}")
            return []
    
    def create_users_in_database(self, teacher_username, teacher_city, groups_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"\nüíæ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            city = self.get_or_create_city(teacher_city)
            
            with transaction.atomic():
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —É—á–∏—Ç–µ–ª—è
                teacher, created = User.objects.get_or_create(
                    username=teacher_username,
                    defaults={
                        'role': 'teacher',
                        'city': city,
                        'email': f'{teacher_username}@{teacher_city.lower()}.ru',
                        'password': make_password('–≤—Ä–µ–º–µ–Ω–Ω—ã–π_–ø–∞—Ä–æ–ª—å_123')
                    }
                )
                
                if created:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—á–∏—Ç–µ–ª—å: {teacher_username}")
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    Profile.objects.get_or_create(user=teacher, defaults={'astrocoins': 1000})
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ cities (ManyToMany)
                    teacher.cities.add(city)
                
                # –°–æ–∑–¥–∞–µ–º —à–∫–æ–ª—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                school = self.get_or_create_school(f"–®–∫–æ–ª–∞ {teacher_city}", city)
                
                # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                course, _ = Course.objects.get_or_create(
                    name="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    defaults={'description': '–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è'}
                )
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ —É—á–µ–Ω–∏–∫–æ–≤
                for group_data in groups_data:
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                    group, created = Group.objects.get_or_create(
                        name=group_data['name'],
                        defaults={
                            'teacher': teacher,
                            'school': school,
                            'course': course,
                            'is_active': True
                        }
                    )
                    
                    if created:
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_data['name']}")
                        self.stats['groups'] += 1
                    
                    # –°–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤
                    for student_name in group_data['students']:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º username –∏–∑ –∏–º–µ–Ω–∏
                        username = self.generate_username(student_name)
                        
                        student, created = User.objects.get_or_create(
                            username=username,
                            defaults={
                                'role': 'student',
                                'city': city,
                                'group': group,
                                'first_name': student_name.split()[1] if len(student_name.split()) > 1 else '',
                                'last_name': student_name.split()[0] if student_name.split() else student_name,
                                'email': f'{username}@student.{teacher_city.lower()}.ru',
                                'password': make_password('—É—á–µ–Ω–∏–∫123')
                            }
                        )
                        
                        if created:
                            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—á–µ–Ω–∏–∫: {student_name} (username: {username})")
                            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                            Profile.objects.get_or_create(user=student, defaults={'astrocoins': 0})
                            self.stats['students'] += 1
                
                print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   - –ì—Ä—É–ø–ø: {self.stats['groups']}")
                print(f"   - –£—á–µ–Ω–∏–∫–æ–≤: {self.stats['students']}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            self.stats['errors'].append(f"Database creation error: {str(e)}")
    
    def generate_username(self, full_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è username –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
        name_parts = full_name.lower().replace(' ', '_').replace('.', '')
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        username = name_parts[:20] if len(name_parts) > 20 else name_parts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        counter = 1
        original_username = username
        while User.objects.filter(username=username).exists():
            username = f"{original_username}_{counter}"
            counter += 1
            
        return username
    
    def run_full_import(self, teacher_email, teacher_password, teacher_city):
        """–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—á–∏—Ç–µ–ª—è {teacher_email} –∏–∑ –≥–æ—Ä–æ–¥–∞ {teacher_city}")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.login(teacher_email, teacher_password):
            return False
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø
        groups_data = self.parse_groups(teacher_city)
        
        if not groups_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö  
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ email –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î
        teacher_username = teacher_email.split('@')[0]
        self.create_users_in_database(teacher_username, teacher_city, groups_data)
        
        # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.stats['errors']:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ ({len(self.stats['errors'])}):")
            for error in self.stats['errors']:
                print(f"   - {error}")
        
        return True


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    parser = AlgoritmikaParser()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    TEACHER_EMAIL = "depressed7kk1d@vk.com"
    TEACHER_PASSWORD = "123456"
    TEACHER_CITY = "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"
    
    # –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
    success = parser.run_full_import(TEACHER_EMAIL, TEACHER_PASSWORD, TEACHER_CITY)
    
    if success:
        print("\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
