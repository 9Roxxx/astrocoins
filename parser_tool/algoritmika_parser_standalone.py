#!/usr/bin/env python3
"""
Standalone –ø–∞—Ä—Å–µ—Ä –¥–ª—è algoritmika25.ru (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Django –ë–î)
–¢–æ–ª—å–∫–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
"""

import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime, date
import time
import re


class AlgoritmikaParserStandalone:
    """Standalone –ø–∞—Ä—Å–µ—Ä –¥–ª—è algoritmika25.ru"""
    
    def __init__(self, base_url="https://algoritmika25.ru"):
        self.base_url = base_url
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # URLs –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–∞–π—Ç–∞
        self.login_url = f"{self.base_url}/login"  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ /login
        self.groups_url = f"{self.base_url}/admin"  # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ /admin –¥–ª—è –≥—Ä—É–ø–ø
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.city_mapping = {
            # –ë—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ –∏–º–µ–Ω–∞–º —É—á–∏—Ç–µ–ª–µ–π –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º
            'default': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'  # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        self.parsed_data = {
            'students': [],  # –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, –±–∞–ª–∞–Ω—Å, –≥—Ä—É–ø–ø–∞
            'groups': [],    # –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
            'summary': {
                'total_students': 0,
                'total_groups': 0,
                'export_date': None
            }
        }

    def login(self, email, password):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ"""
        try:
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {email}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            login_page = self.session.get(self.login_url)
            soup = BeautifulSoup(login_page.content, 'html.parser')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω (Laravel –∏—Å–ø–æ–ª—å–∑—É–µ—Ç _token)
            csrf_token = soup.find('input', {'name': '_token'})
            if csrf_token:
                csrf_token = csrf_token.get('value')
                print(f"üîë –ù–∞–π–¥–µ–Ω _token: {csrf_token[:20]}...")
            else:
                print("‚ö†Ô∏è _token –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –∏ –µ—ë –ø–æ–ª—è
            form = soup.find('form')
            if form:
                print(f"üìù –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞")
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                inputs = form.find_all('input')
                print(f"üîç –ü–æ–ª—è —Ñ–æ—Ä–º—ã:")
                for inp in inputs:
                    name = inp.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    input_type = inp.get('type', 'text')
                    placeholder = inp.get('placeholder', '')
                    print(f"   - {name} (type: {input_type}) placeholder: '{placeholder}'")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–æ—Ä–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open('debug_login_form.html', 'w', encoding='utf-8') as f:
                f.write(login_page.text)
            print("üíæ HTML —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_login_form.html")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            login_data = {
                'login': email,  # –ü–æ–ª–µ login –ø—Ä–∏–Ω–∏–º–∞–µ—Ç email
                'password': password,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º Laravel CSRF —Ç–æ–∫–µ–Ω
            if csrf_token:
                login_data['_token'] = csrf_token
            else:
                print("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞")
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
            for key, value in login_data.items():
                if key == 'password':
                    print(f"   - {key}: {'*' * len(str(value))}")
                else:
                    print(f"   - {key}: {value}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            response = self.session.post(self.login_url, data=login_data, allow_redirects=True)
            
            print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
            print(f"üîó URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞: {response.url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            if response.status_code == 200 and '/admin' in response.url:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {email}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def parse_groups(self, city_filter=None):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–∞–π—Ç–∞"""
        try:
            print(f"üìö –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä—É–ø–ø–∞–º–∏
            response = self.session.get(self.groups_url)
            print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø: {response.status_code}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open('debug_groups_page.html', 'w', encoding='utf-8') as f:
                f.write(response.text)
            print("üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_groups_page.html")
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
            groups_found = []
            students_found = []
            courses_found = set()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables = soup.find_all('table')
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            for i, table in enumerate(tables):
                print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã {i+1}:")
                rows = table.find_all('tr')
                print(f"   - –°—Ç—Ä–æ–∫: {len(rows)}")
                
                if len(rows) > 1:  # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    headers = [th.get_text(strip=True) for th in rows[0].find_all(['th', 'td'])]
                    print(f"   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
                    for j, row in enumerate(rows[1:6]):  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
                        cells = [td.get_text(strip=True) for td in row.find_all(['td', 'th'])]
                        if any(cells):  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                            print(f"   - –°—Ç—Ä–æ–∫–∞ {j+1}: {cells}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ (–µ—Å—Ç—å ID, –§–ò–û, –ì—Ä—É–ø–ø—ã)
                    if len(headers) >= 3 and any(h in ['ID', '–§–ò–û', '–ì—Ä—É–ø–ø—ã'] for h in headers):
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                        for j, row in enumerate(rows[1:]):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                            cells = [td.get_text(strip=True) for td in row.find_all(['td', 'th'])]
                            
                            if len(cells) >= 3 and cells[0] and cells[1]:  # ID –∏ –§–ò–û –Ω–µ –ø—É—Å—Ç—ã–µ
                                student_id = cells[0]
                                full_name = cells[1]
                                group_name = cells[2] if len(cells) > 2 else ""
                                
                                # –†–∞–∑–±–∏—Ä–∞–µ–º –§–ò–û
                                name_parts = full_name.strip().split()
                                if len(name_parts) >= 2:
                                    first_name = name_parts[1]  # –ò–º—è
                                    last_name = name_parts[0]   # –§–∞–º–∏–ª–∏—è
                                    middle_name = name_parts[2] if len(name_parts) > 2 else ""
                                else:
                                    first_name = full_name
                                    last_name = ""
                                    middle_name = ""
                                
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
                                # –õ–æ–≥–∏–Ω: –∏–º—è.—Ñ–∞–º–∏–ª–∏—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π)
                                login = self.transliterate_name(first_name, last_name)
                                password = "123456"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                                balance = self.extract_balance_from_coins_data(cells)
                                
                                student_data = {
                                    'id': student_id,
                                    'first_name': first_name,
                                    'last_name': last_name,
                                    'login': login,
                                    'password': password,
                                    'balance': balance,
                                    'group_name': group_name,
                                    'full_name': full_name  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                }
                                
                                students_found.append(student_data)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
                                if group_name:
                                    courses_found.add(group_name)
                        
                        print(f"üìö –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students_found)}")
                        print(f"üìö –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(courses_found)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                        print(f"üë®‚Äçüéì –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
                        for student in students_found[:3]:
                            print(f"   - {student['full_name']} ‚Üí {student['group_name']}")
                        
                        print(f"üìñ –ü—Ä–∏–º–µ—Ä—ã –≥—Ä—É–ø–ø:")
                        for course in list(courses_found)[:5]:
                            print(f"   - {course}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        self.parsed_data['students'] = students_found
                        self.parsed_data['groups'] = list(courses_found)
                        self.parsed_data['summary'] = {
                            'total_students': len(students_found),
                            'total_groups': len(courses_found),
                            'export_date': datetime.now().isoformat()
                        }
                        groups_found = list(courses_found)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ –±–ª–æ–∫–∏
            cards = soup.find_all(['div'], class_=re.compile(r'card|group|class|item', re.I))
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫/–±–ª–æ–∫–æ–≤: {len(cards)}")
            
            for i, card in enumerate(cards[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                text = card.get_text(strip=True)[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                if text:
                    print(f"   - –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1}: {text}...")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—â–µ–º —Å–ø–∏—Å–∫–∏
            lists = soup.find_all(['ul', 'ol'])
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–ø–∏—Å–∫–æ–≤: {len(lists)}")
            
            for i, ul in enumerate(lists[:3]):  # –ü–µ—Ä–≤—ã–µ 3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                items = ul.find_all('li')
                if len(items) > 2:  # –¢–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
                    print(f"   - –°–ø–∏—Å–æ–∫ {i+1}: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for j, li in enumerate(items[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                        text = li.get_text(strip=True)[:50]
                        if text:
                            print(f"     * {text}...")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 4: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            text_content = soup.get_text()
            keywords = ['–≥—Ä—É–ø–ø–∞', '–∫–ª–∞—Å—Å', '—É—á–µ–Ω–∏–∫', '—Å—Ç—É–¥–µ–Ω—Ç', '–∫—É—Ä—Å', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']
            
            print(f"üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ:")
            for keyword in keywords:
                count = text_content.lower().count(keyword.lower())
                if count > 0:
                    print(f"   - '{keyword}': {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.parsed_data['groups'] = groups_found
            
            if groups_found:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups_found)}")
                return groups_found
            else:
                print("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥—Ä—É–ø–ø: {e}")
            return []

    def export_to_json(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        if filename is None:
            filename = f"algoritmika_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.parsed_data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"üíæ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None

    def transliterate_name(self, first_name, last_name):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞"""
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        def transliterate_word(word):
            result = ""
            for char in word.lower():
                result += translit_map.get(char, char)
            return result
        
        first_translit = transliterate_word(first_name)
        last_translit = transliterate_word(last_name)
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–Ω: –∏–º—è.—Ñ–∞–º–∏–ª–∏—è
        login = f"{first_translit}.{last_translit}".lower()
        
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        login = re.sub(r'[^a-z0-9.]', '', login)
        
        return login[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    def extract_balance_from_coins_data(self, cells):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —è—á–µ–π–∫–∏"""
        try:
            # –í 4-–π –∏ 5-–π –∫–æ–ª–æ–Ω–∫–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–∞—Ö
            coins_data = ""
            if len(cells) > 3:
                coins_data += cells[3] + " "
            if len(cells) > 4:
                coins_data += cells[4]
            
            # –ò—â–µ–º —á–∏—Å–ª–∞ —Å "–∫–æ–∏–Ω–æ–≤" –∏–ª–∏ "–∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤"
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
            balance = 0
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–∏—Å–µ–ª –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–∫–æ–∏–Ω–æ–≤"
            import re
            matches = re.findall(r'(\d+)\s*–∫–æ–∏–Ω–æ–≤', coins_data)
            if matches:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                balance = int(matches[-1])
            
            return balance
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0

    def get_debug_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        return {
            'base_url': self.base_url,
            'login_url': self.login_url,
            'groups_url': self.groups_url,
            'session_cookies': dict(self.session.cookies),
            'parsed_counts': {
                'students': len(self.parsed_data['students']),
                'groups': len(self.parsed_data['groups']),
            },
            'summary': self.parsed_data['summary']
        }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parser = AlgoritmikaParserStandalone()
    
    print("üîÑ Standalone –ø–∞—Ä—Å–µ—Ä algoritmika25.ru")
    print("=" * 40)
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    email = input("–í–≤–µ–¥–∏—Ç–µ email —É—á–∏—Ç–µ–ª—è: ").strip()
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
    
    if parser.login(email, password):
        print("\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø
        city = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö): ").strip()
        city_filter = city if city else None
        
        groups = parser.parse_groups(city_filter)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        if groups or True:  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            filename = parser.export_to_json()
            print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        debug_info = parser.get_debug_info()
        print(f"\nüîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(json.dumps(debug_info, ensure_ascii=False, indent=2))
        
    else:
        print("\n‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")


if __name__ == "__main__":
    main()
