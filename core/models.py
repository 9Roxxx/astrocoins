from django.db import models
from django.contrib.auth.models import AbstractUser, UserManager
from django.utils import timezone
from django.utils.text import slugify
from .validators import validate_file_type, validate_file_size
import uuid
import re

class CaseInsensitiveUserManager(UserManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    def get_by_natural_key(self, username):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        return self.get(username__iexact=username)
    
    def authenticate_user(self, username, password):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        try:
            user = self.get(username__iexact=username)
            if user.check_password(password):
                return user
        except self.model.DoesNotExist:
            pass
        return None

def create_cyrillic_slug(text):
    """–°–æ–∑–¥–∞–µ—Ç slug —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    cyrillic_to_latin = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO',
        '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'TS', '–ß': 'CH', '–®': 'SH', '–©': 'SCH',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA'
    }
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    transliterated = ''
    for char in text:
        if char in cyrillic_to_latin:
            transliterated += cyrillic_to_latin[char]
        else:
            transliterated += char
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π slugify –∫ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    slug = slugify(transliterated)
    
    # –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
    if not slug:
        slug = f"category-{uuid.uuid4().hex[:8]}"
    
    return slug

class Parent(models.Model):
    """
    –ú–æ–¥–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    full_name = models.CharField(max_length=255, verbose_name='–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è')
    phone = models.CharField(max_length=20, blank=True, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω')
    email = models.EmailField(blank=True, verbose_name='Email')
    address = models.TextField(blank=True, verbose_name='–ê–¥—Ä–µ—Å')
    work_place = models.CharField(max_length=255, blank=True, verbose_name='–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã')
    notes = models.TextField(blank=True, verbose_name='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏')
    created_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    class Meta:
        verbose_name = '–†–æ–¥–∏—Ç–µ–ª—å'
        verbose_name_plural = '–†–æ–¥–∏—Ç–µ–ª–∏'
        ordering = ['full_name']

    def __str__(self):
        return self.full_name

    @property
    def students_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —É —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        return self.students.count()

class User(AbstractUser):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    """
    ROLE_CHOICES = [
        ('student', '–£—á–µ–Ω–∏–∫'),
        ('teacher', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'),
        ('city_admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞'),
    ]
    
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='student')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
    objects = CaseInsensitiveUserManager()
    group = models.ForeignKey('Group', on_delete=models.SET_NULL, null=True, blank=True, related_name='students')
    
    # –ü–æ–ª—è –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    city = models.ForeignKey('City', on_delete=models.SET_NULL, null=True, blank=True, 
                            verbose_name='–ì–æ—Ä–æ–¥', help_text='–û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —É—á–µ–Ω–∏–∫–æ–≤)')
    cities = models.ManyToManyField('City', blank=True, related_name='teachers', 
                                   verbose_name='–ì–æ—Ä–æ–¥–∞', help_text='–ì–æ—Ä–æ–¥–∞ –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É—á–∏—Ç–µ–ª—å')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    birth_date = models.DateField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
    parent_full_name = models.CharField(max_length=255, blank=True, verbose_name='–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ)')
    parent_phone = models.CharField(max_length=20, blank=True, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è (—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ)')
    
    # –ù–æ–≤–∞—è —Å–≤—è–∑—å —Å –º–æ–¥–µ–ª—å—é Parent
    parent = models.ForeignKey('Parent', on_delete=models.SET_NULL, null=True, blank=True, 
                              related_name='students', verbose_name='–†–æ–¥–∏—Ç–µ–ª—å')

    def is_teacher(self):
        return self.role == 'teacher' or self.role == 'city_admin'
    
    def is_student(self):
        return self.role == 'student'
    
    def get_cities(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.role == 'teacher':
            return self.cities.all()
        elif self.role in ['student', 'city_admin'] and self.city:
            return [self.city]
        return []
    
    def can_access_city(self, city):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º"""
        if self.is_superuser:
            return True
        if self.role == 'teacher':
            return city in self.cities.all()
        elif self.role in ['student', 'city_admin']:
            return self.city == city
        return False
    
    def get_parent_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª–µ (–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è)"""
        if self.parent:
            return {
                'full_name': self.parent.full_name,
                'phone': self.parent.phone,
                'email': self.parent.email,
                'address': self.parent.address,
                'work_place': self.parent.work_place,
                'notes': self.parent.notes,
            }
        elif self.parent_full_name or self.parent_phone:
            return {
                'full_name': self.parent_full_name,
                'phone': self.parent_phone,
                'email': '',
                'address': '',
                'work_place': '',
                'notes': '',
            }
        return None

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    astrocoins = models.IntegerField(default=0)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.user.username}'s profile"

class Transaction(models.Model):
    TRANSACTION_TYPES = [
        ('EARN', 'Earned'),
        ('SPEND', 'Spent'),
        ('TRANSFER', 'Transfer'),
    ]

    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_transactions')
    receiver = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_transactions')
    amount = models.IntegerField()  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.transaction_type}: {self.amount} AstroCoins"

class ProductCategory(models.Model):
    name = models.CharField(max_length=100)
    slug = models.SlugField(unique=True)
    description = models.TextField(blank=True)
    is_featured = models.BooleanField(default=False)  # –î–ª—è "–≥–æ—Ä—è—á–∏—Ö" –∫–∞—Ç–µ–≥–æ—Ä–∏–π (üî•)
    icon = models.CharField(max_length=50, blank=True)  # –î–ª—è –∏–∫–æ–Ω–æ–∫ Font Awesome
    order = models.PositiveIntegerField(default=0)  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    
    # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –∫–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ–¥–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
    city = models.ForeignKey('City', on_delete=models.CASCADE, related_name='categories',
                            verbose_name='–ì–æ—Ä–æ–¥', help_text='–ì–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–∑–¥–∞–Ω–∞ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                            null=True, blank=True)  # –í—Ä–µ–º–µ–Ω–Ω–æ nullable –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    
    created_at = models.DateTimeField(default=timezone.now)

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤'
        ordering = ['order', 'name']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            base_slug = create_cyrillic_slug(self.name)
            slug = base_slug
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
            counter = 1
            while ProductCategory.objects.filter(slug=slug).exclude(pk=self.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            
            self.slug = slug
        super().save(*args, **kwargs)

class Product(models.Model):
    name = models.CharField(max_length=200)
    slug = models.SlugField(unique=True, blank=True, max_length=255)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    description = models.TextField()
    price = models.IntegerField()  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    image = models.ImageField(
        upload_to='products/',
        null=True,
        blank=True,
        validators=[validate_file_type, validate_file_size]
    )
    category = models.ForeignKey(ProductCategory, on_delete=models.SET_NULL, null=True, related_name='products')
    available = models.BooleanField(default=True)
    stock = models.PositiveIntegerField(default=1)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏
    is_digital = models.BooleanField(default=False)  # –¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, Roblox, Steam)
    featured = models.BooleanField(default=False)  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä
    
    # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - —Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ–¥–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
    city = models.ForeignKey('City', on_delete=models.CASCADE, related_name='products',
                            verbose_name='–ì–æ—Ä–æ–¥', help_text='–ì–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–∑–¥–∞–Ω —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä',
                            null=True, blank=True)  # –í—Ä–µ–º–µ–Ω–Ω–æ nullable –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã'
        ordering = ['-featured', '-created_at']
    
    def clean(self):
        from django.core.exceptions import ValidationError
        if self.price < 0:
            raise ValidationError('–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π')
        if self.price > 10000:
            raise ValidationError('–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è (–º–∞–∫—Å–∏–º—É–º 10000 AC)')
        if self.stock < 0:
            raise ValidationError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
        if len(self.name.strip()) == 0:
            raise ValidationError('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
    
    def save(self, *args, **kwargs):
        self.full_clean()
        super().save(*args, **kwargs)

    def get_availability_display(self):
        return "–í –Ω–∞–ª–∏—á–∏–∏" if self.available else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

    def get_type_display(self):
        return "–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä" if self.is_digital else "–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä"

    def get_featured_display(self):
        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π" if self.featured else "–û–±—ã—á–Ω—ã–π"

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            base_slug = create_cyrillic_slug(self.name)
            self.slug = base_slug
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            counter = 1
            while Product.objects.filter(slug=self.slug).exclude(pk=self.pk).exists():
                self.slug = f"{base_slug}-{counter}"
                counter += 1
                
        super().save(*args, **kwargs)

    @property
    def is_in_stock(self):
        return self.stock > 0

class Purchase(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    delivered = models.BooleanField(default=False, verbose_name='–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω')
    delivered_date = models.DateTimeField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏')
    notes = models.TextField(blank=True, verbose_name='–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –≤—ã–¥–∞—á–µ')
    created_at = models.DateTimeField(default=timezone.now)

    class Meta:
        verbose_name = '–ü–æ–∫—É–ø–∫–∞'
        verbose_name_plural = '–ü–æ–∫—É–ø–∫–∏'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.product.name}"
    
    def mark_as_delivered(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π"""
        self.delivered = True
        self.delivered_date = timezone.now()
        self.save()

class City(models.Model):
    """
    –ú–æ–¥–µ–ª—å –≥–æ—Ä–æ–¥–∞
    """
    name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    created_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = '–ì–æ—Ä–æ–¥'
        verbose_name_plural = '–ì–æ—Ä–æ–¥–∞'
        ordering = ['name']

    def __str__(self):
        return self.name

    @property
    def schools_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∫–æ–ª –≤ –≥–æ—Ä–æ–¥–µ"""
        return self.schools.count()


class School(models.Model):
    """
    –ú–æ–¥–µ–ª—å —à–∫–æ–ª—ã/—É—á—Ä–µ–∂–¥–µ–Ω–∏—è
    """
    city = models.ForeignKey(City, on_delete=models.CASCADE, related_name='schools', verbose_name='–ì–æ—Ä–æ–¥')
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è')
    director = models.CharField(max_length=255, verbose_name='–î–∏—Ä–µ–∫—Ç–æ—Ä')
    representative = models.CharField(max_length=255, verbose_name='–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å')
    address = models.TextField(verbose_name='–ê–¥—Ä–µ—Å')
    phone = models.CharField(max_length=20, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω')
    email = models.EmailField(blank=True, verbose_name='Email')
    website = models.URLField(blank=True, verbose_name='–°–∞–π—Ç')
    created_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = '–®–∫–æ–ª–∞'
        verbose_name_plural = '–®–∫–æ–ª—ã'
        ordering = ['city__name', 'name']

    def __str__(self):
        return f"{self.name} ({self.city.name})"

    @property
    def courses_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –≤ —à–∫–æ–ª–µ"""
        return self.courses.count()

    @property
    def groups_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –≤ —à–∫–æ–ª–µ"""
        return self.groups.count()


class Course(models.Model):
    """
    –ú–æ–¥–µ–ª—å –∫—É—Ä—Å–∞
    """
    school = models.ForeignKey(School, on_delete=models.CASCADE, related_name='courses', verbose_name='–®–∫–æ–ª–∞')
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞')
    duration_hours = models.PositiveIntegerField(default=0, verbose_name='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å')
    created_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = '–ö—É—Ä—Å'
        verbose_name_plural = '–ö—É—Ä—Å—ã'
        ordering = ['school__name', 'name']

    def __str__(self):
        return f"{self.name} - {self.school.name}"

    @property
    def groups_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –ø–æ —ç—Ç–æ–º—É –∫—É—Ä—Å—É"""
        return self.groups.count()


class Group(models.Model):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≥—Ä—É–ø–ø—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    """
    name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    
    # –°–≤—è–∑–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ nullable –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏)
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='groups', verbose_name='–ö—É—Ä—Å', null=True, blank=True)
    school = models.ForeignKey(School, on_delete=models.CASCADE, related_name='groups', verbose_name='–®–∫–æ–ª–∞', null=True, blank=True)
    teacher = models.ForeignKey(User, on_delete=models.CASCADE, related_name='teaching_groups', 
                               limit_choices_to={'role__in': ['teacher', 'city_admin']}, verbose_name='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
    curator = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, 
                               related_name='curated_groups', limit_choices_to={'role': 'city_admin'}, 
                               verbose_name='–ö—É—Ä–∞—Ç–æ—Ä')
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Å—Ç–æ
    first_lesson_date = models.DateField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞')
    classroom = models.CharField(max_length=50, blank=True, verbose_name='–ö–∞–±–∏–Ω–µ—Ç')
    lesson_time = models.TimeField(null=True, blank=True, verbose_name='–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π')
    
    # –°—Ç–∞—Ç—É—Å
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞')
    
    created_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = '–ì—Ä—É–ø–ø–∞'
        verbose_name_plural = '–ì—Ä—É–ø–ø—ã'
        ordering = ['-is_active', '-created_at']

    def __str__(self):
        return f"{self.name} - {self.course.name} ({self.school.name})"

    @property
    def students_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
        return self.students.count()

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        from django.core.exceptions import ValidationError
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∫–æ–ª–µ
        if self.course and self.school and self.course.school != self.school:
            raise ValidationError({
                'course': '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —à–∫–æ–ª–µ.'
            })

class AwardReason(models.Model):
    name = models.CharField(max_length=200)
    coins = models.PositiveIntegerField()
    cooldown_days = models.PositiveIntegerField(default=0)  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    is_special = models.BooleanField(default=False)  # –î–ª—è –æ—Å–æ–±—ã—Ö –Ω–∞–≥—Ä–∞–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥)

    def __str__(self):
        return f"{self.name} ({self.coins} AC)"

class CoinAward(models.Model):
    student = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_awards')
    teacher = models.ForeignKey(User, on_delete=models.CASCADE, related_name='given_awards')
    reason = models.ForeignKey(AwardReason, on_delete=models.CASCADE)
    amount = models.PositiveIntegerField()
    created_at = models.DateTimeField(default=timezone.now)
    comment = models.TextField(blank=True)

    def __str__(self):
        return f"{self.student.username} –ø–æ–ª—É—á–∏–ª {self.amount} AC –æ—Ç {self.teacher.username}"

    def save(self, *args, **kwargs):
        if not self.pk:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            Transaction.objects.create(
                sender=self.teacher,
                receiver=self.student,
                amount=self.amount,
                transaction_type='EARN',
                description=f"{self.reason.name}\n{self.comment if self.comment else ''}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
            profile = self.student.profile
            profile.astrocoins += self.amount
            profile.save()
            
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã
        Transaction.objects.create(
            sender=self.teacher,
            receiver=self.student,
            amount=-self.amount,
            transaction_type='EARN',
            description=f"–û—Ç–º–µ–Ω–∞: {self.reason.name}\n{self.comment if self.comment else ''}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        profile = self.student.profile
        profile.astrocoins -= self.amount
        profile.save()
        
        super().delete(*args, **kwargs)