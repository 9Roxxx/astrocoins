from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils import timezone
from django.utils.text import slugify
from .validators import validate_file_type, validate_file_size
import uuid
import re

def create_cyrillic_slug(text):
    """–°–æ–∑–¥–∞–µ—Ç slug —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    cyrillic_to_latin = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO',
        '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'TS', '–ß': 'CH', '–®': 'SH', '–©': 'SCH',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA'
    }
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    transliterated = ''
    for char in text:
        if char in cyrillic_to_latin:
            transliterated += cyrillic_to_latin[char]
        else:
            transliterated += char
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π slugify –∫ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    slug = slugify(transliterated)
    
    # –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
    if not slug:
        slug = f"category-{uuid.uuid4().hex[:8]}"
    
    return slug

class User(AbstractUser):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    """
    ROLE_CHOICES = [
        ('student', '–£—á–µ–Ω–∏–∫'),
        ('teacher', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'),
        ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
    ]
    
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='student')
    group = models.ForeignKey('Group', on_delete=models.SET_NULL, null=True, blank=True, related_name='students')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    birth_date = models.DateField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
    parent_full_name = models.CharField(max_length=255, blank=True, verbose_name='–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è')
    parent_phone = models.CharField(max_length=20, blank=True, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è')

    def is_teacher(self):
        return self.role == 'teacher' or self.role == 'admin'
    
    def is_student(self):
        return self.role == 'student'

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    astrocoins = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.user.username}'s profile"

class Transaction(models.Model):
    TRANSACTION_TYPES = [
        ('EARN', 'Earned'),
        ('SPEND', 'Spent'),
        ('TRANSFER', 'Transfer'),
    ]

    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_transactions')
    receiver = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_transactions')
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.transaction_type}: {self.amount} AstroCoins"

class ProductCategory(models.Model):
    name = models.CharField(max_length=100)
    slug = models.SlugField(unique=True)
    description = models.TextField(blank=True)
    is_featured = models.BooleanField(default=False)  # –î–ª—è "–≥–æ—Ä—è—á–∏—Ö" –∫–∞—Ç–µ–≥–æ—Ä–∏–π (üî•)
    icon = models.CharField(max_length=50, blank=True)  # –î–ª—è –∏–∫–æ–Ω–æ–∫ Font Awesome
    order = models.PositiveIntegerField(default=0)  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    created_at = models.DateTimeField(default=timezone.now)

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤'
        ordering = ['order', 'name']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            base_slug = create_cyrillic_slug(self.name)
            slug = base_slug
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
            counter = 1
            while ProductCategory.objects.filter(slug=slug).exclude(pk=self.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            
            self.slug = slug
        super().save(*args, **kwargs)

class Product(models.Model):
    name = models.CharField(max_length=200)
    slug = models.SlugField(unique=True, blank=True)  # blank=True –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞—Ç—å slug –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(
        upload_to='products/',
        null=True,
        blank=True,
        validators=[validate_file_type, validate_file_size]
    )
    category = models.ForeignKey(ProductCategory, on_delete=models.SET_NULL, null=True, related_name='products')
    available = models.BooleanField(default=True)
    stock = models.PositiveIntegerField(default=1)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏
    is_digital = models.BooleanField(default=False)  # –¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, Roblox, Steam)
    featured = models.BooleanField(default=False)  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã'
        ordering = ['-featured', '-created_at']

    def get_availability_display(self):
        return "–í –Ω–∞–ª–∏—á–∏–∏" if self.available else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

    def get_type_display(self):
        return "–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä" if self.is_digital else "–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä"

    def get_featured_display(self):
        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π" if self.featured else "–û–±—ã—á–Ω—ã–π"

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    @property
    def is_in_stock(self):
        return self.stock > 0

class Purchase(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.user.username} - {self.product.name}"

class Group(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    teacher = models.ForeignKey(User, on_delete=models.CASCADE, related_name='teaching_groups')
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['-created_at']

class AwardReason(models.Model):
    name = models.CharField(max_length=200)
    coins = models.PositiveIntegerField()
    cooldown_days = models.PositiveIntegerField(default=0)  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    is_special = models.BooleanField(default=False)  # –î–ª—è –æ—Å–æ–±—ã—Ö –Ω–∞–≥—Ä–∞–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥)

    def __str__(self):
        return f"{self.name} ({self.coins} AC)"

class CoinAward(models.Model):
    student = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_awards')
    teacher = models.ForeignKey(User, on_delete=models.CASCADE, related_name='given_awards')
    reason = models.ForeignKey(AwardReason, on_delete=models.CASCADE)
    amount = models.PositiveIntegerField()
    created_at = models.DateTimeField(default=timezone.now)
    comment = models.TextField(blank=True)

    def __str__(self):
        return f"{self.student.username} –ø–æ–ª—É—á–∏–ª {self.amount} AC –æ—Ç {self.teacher.username}"

    def save(self, *args, **kwargs):
        if not self.pk:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            Transaction.objects.create(
                sender=self.teacher,
                receiver=self.student,
                amount=self.amount,
                transaction_type='EARN',
                description=f"{self.reason.name}\n{self.comment if self.comment else ''}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
            profile = self.student.profile
            profile.astrocoins += self.amount
            profile.save()
            
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã
        Transaction.objects.create(
            sender=self.teacher,
            receiver=self.student,
            amount=-self.amount,
            transaction_type='EARN',
            description=f"–û—Ç–º–µ–Ω–∞: {self.reason.name}\n{self.comment if self.comment else ''}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        profile = self.student.profile
        profile.astrocoins -= self.amount
        profile.save()
        
        super().delete(*args, **kwargs)