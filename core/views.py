from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.models import Sum, Q
from django.core.paginator import Paginator
from django.http import JsonResponse
from .models import Profile, Transaction, Product, Purchase, Group, AwardReason, CoinAward, ProductCategory, Parent, City, School, Course
# from decimal import Decimal - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º int
from django.contrib.auth.forms import UserChangeForm
from django.contrib.auth import get_user_model
from .forms import ParentForm, StudentParentLinkForm, CreateParentWithStudentForm, CityForm, SchoolForm, CourseForm, GroupForm, QuickCourseForm
import random

User = get_user_model()

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ñ–æ–Ω–æ–≤
GAME_BACKGROUNDS = [
    {
        'name': 'Standoff 2',
        'url': 'https://i.artfile.me/wallpaper/12-12-2022/1920x1080/video-igry-standoff-2-gorod-zdaniya-loka-1632196.jpg'
    },
    {
        'name': 'Dota 2',
        'url': 'https://pw.artfile.me/wallpaper/16-07-2017/650x366/video-igry-dota-2-dota-2-onlajn-action-r-1194082.jpg'
    },
    {
        'name': 'Steam',
        'url': 'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/items/927890/9d24a13b19934ab0fd14228f74cbd6775984ac2f.jpg'
    },
    {
        'name': 'CS 2',
        'url': 'https://images.steamusercontent.com/ugc/2042997274847133077/8534B50A5A691EE7D3F1500E1CF03D41A37D03AC/?imw=5000&imh=5000&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=false'
    },
    {
        'name': 'Roblox',
        'url': 'https://abrakadabra.fun/uploads/posts/2022-03/1646887284_4-abrakadabra-fun-p-temi-dlya-robloksa-fon-7.jpg'
    }
]

@login_required
def dashboard(request):
    profile = Profile.objects.get_or_create(user=request.user)[0]
    transactions = Transaction.objects.filter(
        Q(sender=request.user) | Q(receiver=request.user)
    ).order_by('-created_at')[:15]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–æ–Ω –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ
    random_background = random.choice(GAME_BACKGROUNDS)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    is_birthday = False
    birthday_coins_awarded = False
    
    if request.user.role == 'student' and request.user.birth_date:
        from datetime import date
        today = date.today()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–≥–æ–¥–Ω—è –ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–µ–Ω—å –∏ –º–µ—Å—è—Ü)
        if (today.day == request.user.birth_date.day and 
            today.month == request.user.birth_date.month):
            is_birthday = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            birthday_award_today = Transaction.objects.filter(
                receiver=request.user,
                transaction_type='EARN',
                description__icontains='–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
                created_at__date=today
            ).exists()
            
            # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã - –Ω–∞—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if not birthday_award_today:
                try:
                    # –ù–∞—á–∏—Å–ª—è–µ–º 100 –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤
                    profile.astrocoins += 100
                    profile.save()
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    Transaction.objects.create(
                        receiver=request.user,
                        amount=100,
                        transaction_type='EARN',
                        description=f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –ê—Å—Ç—Ä–æ-–ú–∞—Ä–∫–µ—Ç–∞'
                    )
                    
                    birthday_coins_awarded = True
                    messages.success(request, 'üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫!')
                    
                except Exception as e:
                    import logging
                    logger = logging.getLogger(__name__)
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç –∑–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user.username}: {str(e)}')
    
    context = {
        'profile': profile,
        'transactions': transactions,
        'background_image': random_background['url'],
        'background_name': random_background['name'],
        'is_birthday': is_birthday,
        'birthday_coins_awarded': birthday_coins_awarded,
    }
    return render(request, 'core/dashboard.html', context)

from django.core.exceptions import PermissionDenied

@login_required
def shop(request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
    if request.user.is_teacher() and not request.user.is_superuser:
        raise PermissionDenied("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if hasattr(request.user, 'city') and request.user.city:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        categories = ProductCategory.objects.filter(city=request.user.city).order_by('order')
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞ (–≥–ª–∞–≤–Ω—ã–π —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω) - –≤–∏–¥–∏—Ç –≤—Å–µ
        categories = ProductCategory.objects.all().order_by('order')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≥–æ—Ä–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for category in categories:
        # –¢–æ–≤–∞—Ä—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–æ–º—É –∂–µ –≥–æ—Ä–æ–¥—É —á—Ç–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        category.filtered_products = category.products.filter(
            city=category.city
        ).order_by('-featured', '-created_at')
    
    # –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –¢–û–õ–¨–ö–û –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–∏—Ö —Ç–æ–≤–∞—Ä—ã
    if request.user.role == 'student':
        categories = [cat for cat in categories if cat.filtered_products.exists()]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–æ–Ω –∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    random_background = random.choice(GAME_BACKGROUNDS)
    
    context = {
        'categories': categories,
        'background_image': random_background['url'],
        'background_name': random_background['name'],
    }
    
    return render(request, 'core/shop.html', context)

@login_required
def add_product(request):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã")
    
    if request.method == 'POST':
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥–æ—Ä–æ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            city = request.user.city if hasattr(request.user, 'city') and request.user.city else None
            if not city and not request.user.is_superuser:
                raise Exception("–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥")
            
            product = Product.objects.create(
                name=request.POST['name'],
                description=request.POST['description'],
                price=request.POST['price'],
                stock=request.POST['stock'],
                category_id=request.POST['category'],
                city=city,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥–æ—Ä–æ–¥—É
                is_digital=request.POST.get('is_digital', False) == 'on',
                featured=request.POST.get('featured', False) == 'on'
            )
            
            if 'image' in request.FILES:
                product.image = request.FILES['image']
            
            product.save()
            
            city_name = city.name if city else "–±–µ–∑ –≥–æ—Ä–æ–¥–∞"
            messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–æ—Ä–æ–¥: {city_name}')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}')
        
        return redirect('shop')

@login_required
def edit_product(request):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
    
    if request.method == 'POST':
        try:
            product = Product.objects.get(id=request.POST['product_id'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
            if (request.user.role == 'city_admin' and 
                hasattr(request.user, 'city') and request.user.city and 
                product.city != request.user.city):
                raise PermissionDenied("–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞")
            
            product.name = request.POST['name']
            product.description = request.POST['description']
            product.price = request.POST['price']
            product.stock = request.POST['stock']
            product.category_id = request.POST['category']
            product.is_digital = request.POST.get('is_digital', False) == 'on'
            product.featured = request.POST.get('featured', False) == 'on'
            
            # –ì–æ—Ä–æ–¥ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è - –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥–æ—Ä–æ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
            if 'image' in request.FILES:
                product.image = request.FILES['image']
            
            product.save()
            
            city_name = product.city.name if product.city else "–±–µ–∑ –≥–æ—Ä–æ–¥–∞"
            messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –≥–æ—Ä–æ–¥–µ: {city_name}')
        except Product.DoesNotExist:
            messages.error(request, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        except PermissionDenied as e:
            messages.error(request, str(e))
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}')
        
        return redirect('shop')

@login_required
def get_product(request, product_id):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤")
    
    try:
        product = Product.objects.get(id=product_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        if (request.user.role == 'city_admin' and 
            hasattr(request.user, 'city') and request.user.city and 
            product.city != request.user.city):
            return JsonResponse({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}, status=403)
        
        data = {
            'id': product.id,
            'name': product.name,
            'description': product.description,
            'price': str(product.price),
            'stock': product.stock,
            'category': product.category_id if product.category else None,
            'is_digital': product.is_digital,
            'featured': product.featured,
            'city': product.city.id if product.city else None,  # ID –≥–æ—Ä–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞
            'city_name': product.city.name if product.city else '–ë–µ–∑ –≥–æ—Ä–æ–¥–∞'  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        }
        return JsonResponse(data)
    except Product.DoesNotExist:
        return JsonResponse({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

@login_required
def delete_product(request, product_id):
    if not request.user.is_superuser:
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã")
    
    if request.method == 'POST':
        try:
            product = Product.objects.get(id=product_id)
            name = product.name
            product.delete()
            messages.success(request, f'–¢–æ–≤–∞—Ä "{name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        except Product.DoesNotExist:
            messages.error(request, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}')
        
        return JsonResponse({'status': 'ok'})

@login_required
def purchase_product(request, product_id):
    if request.method != 'POST':
        return redirect('shop')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∏—Ç–µ–ª—å (—Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å)
    if request.user.is_teacher() and not request.user.is_superuser:
        messages.error(request, '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!')
        return redirect('shop')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è product_id
    try:
        product_id = int(product_id)
        if product_id <= 0:
            raise ValueError("Invalid product ID")
    except (ValueError, TypeError):
        messages.error(request, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞!')
        return redirect('shop')
    
    product = get_object_or_404(Product, id=product_id, available=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ —É—á–µ–Ω–∏–∫–∞
    if request.user.is_student() and request.user.city:
        if product.city != request.user.city:
            messages.error(request, '–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!')
            return redirect('shop')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    if product.stock <= 0:
        messages.error(request, '–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ!')
        return redirect('shop')
    
    profile = Profile.objects.get(user=request.user)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
    if product.price <= 0:
        messages.error(request, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞!')
        return redirect('shop')
    
    if profile.astrocoins < product.price:
        messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ AstroCoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏!')
        return redirect('shop')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
    with transaction.atomic():
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        product = Product.objects.select_for_update().get(id=product_id, available=True)
        
        if product.stock <= 0:
            messages.error(request, '–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ!')
            return redirect('shop')
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = Profile.objects.select_for_update().get(user=request.user)
        
        if profile.astrocoins < product.price:
            messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ AstroCoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏!')
            return redirect('shop')
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
        Purchase.objects.create(
            user=request.user,
            product=product,
            total_price=product.price
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º AstroCoins
        profile.astrocoins -= product.price
        profile.save()
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        product.stock -= 1
        product.save()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        Transaction.objects.create(
            sender=request.user,
            receiver=request.user,  # –í —Å–ª—É—á–∞–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞—é—Ç
            amount=product.price,
            transaction_type='SPEND',
            description=f'–ü–æ–∫—É–ø–∫–∞ {product.name}'
        )
    
    messages.success(request, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {product.name}!')
    return redirect('shop')

from django.http import JsonResponse
from django.db import transaction
from django.template.loader import render_to_string

@login_required
def transfer_coins(request):
    if request.method == 'POST':
        receiver_username = request.POST.get('receiver')
        amount = int(request.POST.get('amount', 0))
        
        try:
            if amount <= 0:
                return JsonResponse({'success': False, 'error': '–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!'})
            
            if amount < 20:
                return JsonResponse({'success': False, 'error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 20 AC'})
            
            with transaction.atomic():
                receiver = User.objects.select_for_update().get(username=receiver_username)
                sender_profile = Profile.objects.select_for_update().get(user=request.user)
                receiver_profile = Profile.objects.select_for_update().get(user=receiver)
                
                if receiver == request.user:
                    return JsonResponse({'success': False, 'error': '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å AstroCoins —Å–∞–º–æ–º—É —Å–µ–±–µ!'})
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 5% –∑–∞ –ø–µ—Ä–µ–≤–æ–¥
                commission = int(amount * 0.05)  # 5% –∫–æ–º–∏—Å—Å–∏—è, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
                total_cost = amount + commission  # –û–±—â–∞—è —Å—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é
                
                if sender_profile.astrocoins < total_cost:
                    return JsonResponse({
                        'success': False, 
                        'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ AstroCoins! –ù—É–∂–Ω–æ {total_cost} AC (–ø–µ—Ä–µ–≤–æ–¥ {amount} AC + –∫–æ–º–∏—Å—Å–∏—è {commission} AC)'
                    })
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –∫–æ–º–∏—Å—Å–∏–µ–π
                sender_profile.astrocoins -= total_cost  # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É + –∫–æ–º–∏—Å—Å–∏—é
                receiver_profile.astrocoins += amount    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É–º–º—É
                
                sender_profile.save()
                receiver_profile.save()
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)
                Transaction.objects.create(
                    sender=request.user,
                    receiver=receiver,
                    amount=total_cost,
                    transaction_type='TRANSFER',
                    description=f'–ü–µ—Ä–µ–≤–æ–¥ –∫ {receiver_username} ({amount} AC + –∫–æ–º–∏—Å—Å–∏—è {commission} AC)'
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)
                Transaction.objects.create(
                    sender=request.user,
                    receiver=receiver,
                    amount=amount,
                    transaction_type='TRANSFER',
                    description=f'–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç {request.user.username}'
                )
                
                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    transaction_html = render_to_string('core/transaction_item.html', {
                        'transaction': Transaction.objects.filter(
                            Q(sender=request.user) | Q(receiver=request.user)
                        ).latest('created_at'),
                        'user': request.user
                    })
                    
                    return JsonResponse({
                        'success': True,
                        'message': f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} AC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_username}! –ö–æ–º–∏—Å—Å–∏—è: {commission} AC',
                        'new_balance': str(sender_profile.astrocoins),
                        'transaction_html': transaction_html
                    })
                else:
                    messages.success(request, f'–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} AC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_username}! –°–ø–∏—Å–∞–Ω–æ: {total_cost} AC (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {commission} AC)')
                    return redirect('dashboard')
                
        except User.DoesNotExist:
            error_message = '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!'
        except Exception as e:
            error_message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ!'
        
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse({'success': False, 'error': error_message})
        else:
            messages.error(request, error_message)
            return redirect('dashboard')
            
    return redirect('dashboard')

@login_required
def profile(request):
    profile = Profile.objects.get(user=request.user)
    transactions = Transaction.objects.filter(
        Q(sender=request.user) | Q(receiver=request.user)
    ).order_by('-created_at')
    purchases = Purchase.objects.filter(user=request.user).order_by('-created_at')
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions_paginator = Paginator(transactions, 10)
    transactions_page = request.GET.get('transactions_page')
    transactions = transactions_paginator.get_page(transactions_page)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫
    purchases_paginator = Paginator(purchases, 10)
    purchases_page = request.GET.get('purchases_page')
    purchases = purchases_paginator.get_page(purchases_page)
    
    context = {
        'profile': profile,
        'transactions': transactions,
        'purchases': purchases,
    }
    return render(request, 'core/profile.html', context)

@login_required
def profile_edit(request, user_id=None):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    is_own_profile = user_id is None
    
    # –ï—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    if user_id is None:
        # –õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        user_to_edit = request.user
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        if not request.user.is_teacher():
            messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π')
            return redirect('profile')
        
        user_to_edit = get_object_or_404(User, id=user_id)
        
        # –£—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
        if not request.user.is_superuser and (
            not user_to_edit.is_student() or 
            (user_to_edit.group and user_to_edit.group.teacher != request.user)
        ):
            messages.error(request, '–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤')
            return redirect('profile')

    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'update_profile':
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                user_to_edit.first_name = request.POST.get('first_name', '')
                user_to_edit.last_name = request.POST.get('last_name', '')
                user_to_edit.email = request.POST.get('email', '')
                
                # –°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥–æ—Ä–æ–¥–æ–≤)
                if user_to_edit.role == 'city_admin' and is_own_profile:
                    new_city_id = request.POST.get('city')
                    
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    try:
                        new_city_id = int(new_city_id) if new_city_id else None
                    except (ValueError, TypeError):
                        new_city_id = None
                    
                    current_city_id = user_to_edit.city.id if user_to_edit.city else None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –≥–æ—Ä–æ–¥
                    if new_city_id and new_city_id != current_city_id:
                        try:
                            new_city = City.objects.get(id=new_city_id)
                            old_city_name = user_to_edit.city.name if user_to_edit.city else '–ù–µ —É–∫–∞–∑–∞–Ω'
                            user_to_edit.city = new_city
                            
                            messages.warning(request, 
                                f'–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω —Å "{old_city_name}" –Ω–∞ "{new_city.name}". '
                                f'–í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞: '
                                f'—É—á–µ–Ω–∏–∫–æ–≤, —Ç–æ–≤–∞—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥—Ä—É–ø–ø—ã. –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–µ–∂–Ω–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω.')
                        except City.DoesNotExist:
                            messages.error(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                            return redirect('profile_edit')
                
                user_to_edit.save()
                messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
                
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                import logging
                logger = logging.getLogger(__name__)
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_edit.username}: {str(e)}')
                messages.error(request, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}')
                return redirect('profile_edit')
            
        elif action == 'change_password':
            # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
            new_password = request.POST.get('new_password')
            if new_password:
                user_to_edit.set_password(new_password)
                user_to_edit.save()
                messages.success(request, '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
            else:
                messages.error(request, '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        
        if user_id is None:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
            return redirect('profile')
        else:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
            return redirect('student_profile', student_id=user_id)

    context = {
        'user_to_edit': user_to_edit,
        'is_own_profile': is_own_profile,
        'cities': City.objects.all().order_by('name'),  # –î–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    }
    return render(request, 'core/profile_edit.html', context)

@login_required
def knowledge_base(request):
    return render(request, 'core/knowledge_base.html')

# –°—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ—É—Ç–µ—Ä–∞
def institutions(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π"""
    return render(request, 'core/footer/institutions.html')

def return_policy(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return render(request, 'core/footer/return_policy.html')

def data_transfer(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"""
    return render(request, 'core/footer/data_transfer.html')

def privacy_policy(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    return render(request, 'core/footer/privacy_policy.html')

def support(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    return render(request, 'core/footer/support.html')

def astrocoins_program(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ê—Å—Ç—Ä–æ–∫–æ–∏–Ω—ã"""
    return render(request, 'core/footer/astrocoins_program.html')

def changelog(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    return render(request, 'core/footer/changelog.html')

@login_required
def groups(request):
    context = {}
    
    if request.user.is_teacher():
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        from django.db.models import Q
        
        if request.user.role == 'city_admin' and hasattr(request.user, 'city') and request.user.city:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤–∏–¥–∏—Ç –í–°–ï –≥—Ä—É–ø–ø—ã —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —É—á–∏—Ç–µ–ª—å/–∫—É—Ä–∞—Ç–æ—Ä)
            groups = Group.objects.filter(
                school__city=request.user.city
            ).select_related('course', 'school', 'curator', 'teacher').distinct()
        else:
            # –û–±—ã—á–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã –∏ –≥–¥–µ –æ–Ω –∫—É—Ä–∞—Ç–æ—Ä
            groups = Group.objects.filter(
                Q(teacher=request.user) | Q(curator=request.user)
            ).select_related('course', 'school', 'curator').distinct()
        
        if request.method == 'POST':
            action = request.POST.get('action')
            
            if action == 'create_group':
                form = GroupForm(request.POST)
                if form.is_valid():
                    try:
                        group = form.save(commit=False)
                        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –≤—ã–±—Ä–∞–ª —É—á–∏—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–∞–º–æ–≥–æ
                        if not group.teacher:
                            group.teacher = request.user
                        group.save()
                        
                        teacher_name = group.teacher.get_full_name() or group.teacher.username
                        curator_info = ""
                        if group.curator:
                            curator_name = group.curator.get_full_name() or group.curator.username
                            curator_info = f", –∫—É—Ä–∞—Ç–æ—Ä: {curator_name}"
                        
                        messages.success(request, f'–ì—Ä—É–ø–ø–∞ "{group.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}{curator_info})')
                    except Exception as e:
                        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {str(e)}')
                else:
                    for field, errors in form.errors.items():
                        for error in errors:
                            messages.error(request, f'{form.fields[field].label}: {error}')
            
            elif action == 'award_coins':
                student_id = request.POST.get('student_id')
                amount = int(request.POST.get('amount', 0))
                reason = request.POST.get('reason', '')
                
                try:
                    student = User.objects.get(id=student_id, role='student')
                    student_profile = Profile.objects.get(user=student)
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º AstroCoins
                    student_profile.astrocoins += amount
                    student_profile.save()
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    Transaction.objects.create(
                        sender=request.user,
                        receiver=student,
                        amount=amount,
                        transaction_type='EARN',
                        description=f'–ù–∞–≥—Ä–∞–¥–∞ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {reason}'
                    )
                    
                    messages.success(request, f'–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} AstroCoins —É—á–µ–Ω–∏–∫—É {student.username}')
                except User.DoesNotExist:
                    messages.error(request, '–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                except Exception as e:
                    messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ AstroCoins')
            
            elif action == 'award_group':
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ
                group_id = request.POST.get('group_id')
                reason_id = request.POST.get('reason_id')
                comment = request.POST.get('comment', '')
                
                try:
                    group = Group.objects.get(id=group_id)
                    reason = AwardReason.objects.get(id=reason_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                    if not (request.user.is_superuser or group.teacher == request.user):
                        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ')
                        return redirect('groups')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
                    students = group.students.filter(role='student')
                    
                    if not students.exists():
                        messages.warning(request, '–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è')
                        return redirect('groups')
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω—ã –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É
                    import logging
                    logger = logging.getLogger(__name__)
                    
                    awards_count = 0
                    for student in students:
                        try:
                            logger.info(f"–ì—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: student_id={student.id}, teacher_id={request.user.id}, reason_id={reason.id}, amount={reason.coins}")
                            
                            award = CoinAward.objects.create(
                                student=student,
                                teacher=request.user,
                                reason=reason,
                                amount=reason.coins,
                                comment=comment
                            )
                            awards_count += 1
                            logger.info(f"–ì—Ä—É–ø–ø–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: award_id={award.id} –¥–ª—è student_id={student.id}")
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥—Ä—É–ø–ø–æ–≤–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –¥–ª—è student_id={student.id}: {e}")
                            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫—É {student.get_full_name() or student.username}: {str(e)}')
                    
                    messages.success(request, f'–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reason.coins} AC –∫–∞–∂–¥–æ–º—É –∏–∑ {awards_count} —É—á–µ–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã "{group.name}"')
                    
                except Group.DoesNotExist:
                    messages.error(request, '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                except AwardReason.DoesNotExist:
                    messages.error(request, '–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                except Exception as e:
                    messages.error(request, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}')
            
            elif action == 'award_student':
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É —É—á–µ–Ω–∏–∫—É
                student_id = request.POST.get('student_id')
                reason_id = request.POST.get('reason_id')
                comment = request.POST.get('comment', '')
                
                try:
                    student = User.objects.get(id=student_id, role='student')
                    reason = AwardReason.objects.get(id=reason_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                    if not (request.user.is_superuser or 
                           (student.group and student.group.teacher == request.user)):
                        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ —ç—Ç–æ–º—É —É—á–µ–Ω–∏–∫—É')
                        return redirect('groups')
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                    import logging
                    logger = logging.getLogger(__name__)
                    
                    try:
                        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: student_id={student.id}, teacher_id={request.user.id}, reason_id={reason.id}, amount={reason.coins}")
                        
                        award = CoinAward.objects.create(
                            student=student,
                            teacher=request.user,
                            reason=reason,
                            amount=reason.coins,
                            comment=comment
                        )
                        
                        logger.info(f"–ù–∞–≥—Ä–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: award_id={award.id}")
                        messages.success(request, f'–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reason.coins} AC —É—á–µ–Ω–∏–∫—É {student.get_full_name() or student.username}')
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
                        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}')
                    
                except User.DoesNotExist:
                    messages.error(request, '–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                except AwardReason.DoesNotExist:
                    messages.error(request, '–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                except Exception as e:
                    messages.error(request, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}')
            
            elif action == 'add_student_to_group':
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
                if request.user.is_superuser:
                    student_id = request.POST.get('student_id')
                    group_id = request.POST.get('group_id')
                    
                    try:
                        student = User.objects.get(id=student_id, role='student')
                        group = Group.objects.get(id=group_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —É—á–µ–Ω–∏–∫–∞–º–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
                        if (hasattr(request.user, 'city') and request.user.city and 
                            request.user.role == 'city_admin' and 
                            student.city != request.user.city):
                            messages.error(request, f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ ({request.user.city.name})')
                            return redirect('groups')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—á–µ–Ω–∏–∫ –µ—â–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
                        if student.group:
                            messages.warning(request, f'–£—á–µ–Ω–∏–∫ {student.get_full_name() or student.username} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ "{student.group.name}"')
                        else:
                            student.group = group
                            student.save()
                            messages.success(request, f'–£—á–µ–Ω–∏–∫ {student.get_full_name() or student.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É "{group.name}"')
                    
                    except User.DoesNotExist:
                        messages.error(request, '–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    except Group.DoesNotExist:
                        messages.error(request, '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                    except Exception as e:
                        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {str(e)}')
                else:
                    messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É')
            
            elif action == 'remove_student_from_group':
                # –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
                if request.user.is_superuser:
                    student_id = request.POST.get('student_id')
                    
                    try:
                        student = User.objects.get(id=student_id, role='student')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —É—á–µ–Ω–∏–∫–∞–º–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
                        if (hasattr(request.user, 'city') and request.user.city and 
                            request.user.role == 'city_admin' and 
                            student.city != request.user.city):
                            messages.error(request, f'–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º–∏ –∏–∑ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ ({request.user.city.name})')
                            return redirect('groups')
                        
                        group_name = student.group.name if student.group else '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'
                        
                        student.group = None
                        student.save()
                        messages.success(request, f'–£—á–µ–Ω–∏–∫ {student.get_full_name() or student.username} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã "{group_name}"')
                    
                    except User.DoesNotExist:
                        messages.error(request, '–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    except Exception as e:
                        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã: {str(e)}')
                else:
                    messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã')
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
        award_reasons = AwardReason.objects.all().order_by('coins')
        
        context.update({
            'groups': groups,
            'award_reasons': award_reasons,
            'is_teacher': True,
            'is_superuser': request.user.is_superuser,
            'group_form': GroupForm(),
            'cities': City.objects.all().order_by('name'),
            'schools': School.objects.all().order_by('city__name', 'name'),
            'courses': Course.objects.filter(is_active=True).order_by('school__name', 'name'),
        })
        
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
        if request.user.is_superuser:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            students_query = User.objects.filter(role='student').select_related('group')
            students_without_group_query = User.objects.filter(role='student', group=None)
            
            # –ï—Å–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å –≥–æ—Ä–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            if hasattr(request.user, 'city') and request.user.city and request.user.role == 'city_admin':
                students_query = students_query.filter(city=request.user.city)
                students_without_group_query = students_without_group_query.filter(city=request.user.city)
            
            context.update({
                'all_students': students_query.order_by('username'),
                'students_without_group': students_without_group_query.order_by('username'),
            })
    else:
        # –î–ª—è —É—á–µ–Ω–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≥—Ä—É–ø–ø—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if request.user.group:
            context.update({
                'group': request.user.group,
                'classmates': request.user.group.students.exclude(id=request.user.id),
                'is_teacher': False
            })
    
    return render(request, 'core/groups.html', context)

@login_required
def news(request):
    return render(request, 'core/news.html')

@login_required
def manage_coins(request, student_id):
    if not request.user.is_teacher():
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–∞–º–∏")
    
    student = get_object_or_404(User, id=student_id, role='student')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if not request.user.is_superuser and student.group.teacher != request.user:
        raise PermissionDenied("–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–∞–º–∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤")
    
    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'award':
            reason_id = request.POST.get('reason')
            comment = request.POST.get('comment', '')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            try:
                reason_id = int(reason_id)
                if reason_id <= 0:
                    raise ValueError("Invalid reason ID")
            except (ValueError, TypeError):
                messages.error(request, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è!')
                return redirect('manage_coins', student_id=student_id)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if len(comment) > 500:
                messages.error(request, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)!')
                return redirect('manage_coins', student_id=student_id)
            
            try:
                reason = AwardReason.objects.get(id=reason_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Å—É–º–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
                if reason.coins <= 0:
                    messages.error(request, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è!')
                    return redirect('manage_coins', student_id=student_id)
                
                if reason.coins > 1000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
                    messages.error(request, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è!')
                    return redirect('manage_coins', student_id=student_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if reason.cooldown_days > 0:
                    last_award = CoinAward.objects.filter(
                        student=student,
                        reason=reason,
                        created_at__gte=timezone.now() - timedelta(days=reason.cooldown_days)
                    ).first()
                    
                    if last_award:
                        messages.error(request, f'–≠—Ç—É –Ω–∞–≥—Ä–∞–¥—É –º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ {reason.cooldown_days} –¥–Ω–µ–π')
                        return redirect('manage_coins', student_id=student_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
                today_awards = CoinAward.objects.filter(
                    student=student,
                    teacher=request.user,
                    created_at__date=timezone.now().date()
                ).count()
                
                if today_awards >= 10:  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å –æ—Ç –æ–¥–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è
                    messages.error(request, '–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞!')
                    return redirect('manage_coins', student_id=student_id)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
                with transaction.atomic():
                    award = CoinAward.objects.create(
                        student=student,
                        teacher=request.user,
                        reason=reason,
                        amount=reason.coins,
                        comment=comment
                    )
                    messages.success(request, f'–ù–∞—á–∏—Å–ª–µ–Ω–æ {reason.coins} AC —É—á–µ–Ω–∏–∫—É {student.get_full_name() or student.username}')
                
            except AwardReason.DoesNotExist:
                messages.error(request, '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}')
        
        elif action == 'delete_award':
            award_id = request.POST.get('award_id')
            try:
                award = CoinAward.objects.get(id=award_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                if not request.user.is_superuser and award.teacher != request.user:
                    raise PermissionDenied("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è")
                
                award.delete()
                messages.success(request, '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
            except CoinAward.DoesNotExist:
                messages.error(request, '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    awards = CoinAward.objects.filter(student=student).order_by('-created_at')
    reasons = AwardReason.objects.all()
    
    context = {
        'student': student,
        'awards': awards,
        'reasons': reasons,
    }
    return render(request, 'core/manage_coins.html', context)

@login_required
def student_profile(request, student_id):
    if not request.user.is_teacher():
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤")
    
    student = get_object_or_404(User, id=student_id, role='student')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if not request.user.is_superuser and student.group.teacher != request.user:
        raise PermissionDenied("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤")
    
    transactions = Transaction.objects.filter(
        Q(sender=student) | Q(receiver=student)
    ).order_by('-created_at')
    
    purchases = Purchase.objects.filter(user=student).order_by('-created_at')
    awards = CoinAward.objects.filter(student=student).order_by('-created_at')
    
    context = {
        'student': student,
        'transactions': transactions,
        'purchases': purchases,
        'awards': awards,
    }
    return render(request, 'core/student_profile.html', context)

@login_required
def activity_monitoring(request):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–æ–≤ (–ø–æ–∫—É–ø–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã)"""
    if not (request.user.is_teacher() or request.user.is_superuser):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    group_filter = request.GET.get('group_filter', '')
    hide_delivered = request.GET.get('hide_delivered', '') == 'on'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if request.user.is_superuser:
        if request.user.role == 'city_admin' and hasattr(request.user, 'city') and request.user.city:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤–∏–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
            available_users = User.objects.filter(role='student', city=request.user.city).select_related('profile', 'group')
            purchases = Purchase.objects.filter(user__city=request.user.city).select_related('user', 'product', 'user__profile', 'user__group')
            transfers = Transaction.objects.filter(
                transaction_type='TRANSFER'
            ).filter(
                Q(sender__city=request.user.city) | Q(receiver__city=request.user.city)
            ).select_related('sender', 'receiver', 'sender__profile', 'receiver__profile', 'sender__group', 'receiver__group')
            available_groups = Group.objects.filter(school__city=request.user.city).order_by('name')
        else:
            # –ì–ª–∞–≤–Ω—ã–π —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö
            available_users = User.objects.filter(role='student').select_related('profile', 'group')
            purchases = Purchase.objects.all().select_related('user', 'product', 'user__profile', 'user__group')
            transfers = Transaction.objects.filter(transaction_type='TRANSFER').select_related('sender', 'receiver', 'sender__profile', 'receiver__profile', 'sender__group', 'receiver__group')
            available_groups = Group.objects.all().order_by('name')
    else:
        # –û–±—ã—á–Ω—ã–π —É—á–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
        available_users = User.objects.filter(role='student', group__teacher=request.user).select_related('profile', 'group')
        purchases = Purchase.objects.filter(user__group__teacher=request.user).select_related('user', 'product', 'user__profile', 'user__group')
        transfers = Transaction.objects.filter(
            transaction_type='TRANSFER'
        ).filter(
            Q(sender__group__teacher=request.user) | Q(receiver__group__teacher=request.user)
        ).select_related('sender', 'receiver', 'sender__profile', 'receiver__profile', 'sender__group', 'receiver__group')
        available_groups = Group.objects.filter(teacher=request.user).order_by('name')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ
    if group_filter:
        purchases = purchases.filter(user__group_id=group_filter)
        transfers = transfers.filter(
            Q(sender__group_id=group_filter) | Q(receiver__group_id=group_filter)
        )
    
    # –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤—ã–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if hide_delivered:
        purchases = purchases.filter(delivered=False)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    purchases = purchases.order_by('-created_at')
    transfers = transfers.order_by('-created_at')
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫
    purchases_paginator = Paginator(purchases, 20)
    purchases_page = request.GET.get('purchases_page')
    purchases = purchases_paginator.get_page(purchases_page)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    transfers_paginator = Paginator(transfers, 20)
    transfers_page = request.GET.get('transfers_page')
    transfers = transfers_paginator.get_page(transfers_page)
    
    context = {
        'available_users': available_users,
        'available_groups': available_groups,
        'purchases': purchases,
        'transfers': transfers,
        'is_superuser': request.user.is_superuser,
        'group_filter': group_filter,
        'hide_delivered': hide_delivered,
    }
    return render(request, 'core/activity_monitoring.html', context)

@login_required
def mark_purchase_delivered(request, purchase_id):
    """API endpoint –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ"""
    if not (request.user.is_superuser or request.user.is_teacher()):
        return JsonResponse({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'})
    
    if request.method == 'POST':
        try:
            purchase = Purchase.objects.get(id=purchase_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–¥–∞—á—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
            if not request.user.is_superuser:
                if not (purchase.user.group and purchase.user.group.teacher == request.user):
                    return JsonResponse({'success': False, 'error': '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–¥–∞—á—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤'})
            
            purchase.mark_as_delivered()
            return JsonResponse({'success': True})
        except Purchase.DoesNotExist:
            return JsonResponse({'success': False, 'error': '–ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    
    return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞'})

@login_required
def mark_purchase_not_delivered(request, purchase_id):
    """API endpoint –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞"""
    if not (request.user.is_superuser or request.user.is_teacher()):
        return JsonResponse({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'})
    
    if request.method == 'POST':
        try:
            purchase = Purchase.objects.get(id=purchase_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å –≤—ã–¥–∞—á—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
            if not request.user.is_superuser:
                if not (purchase.user.group and purchase.user.group.teacher == request.user):
                    return JsonResponse({'success': False, 'error': '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å –≤—ã–¥–∞—á—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤'})
            
            purchase.delivered = False
            purchase.delivered_date = None
            purchase.save()
            return JsonResponse({'success': True})
        except Purchase.DoesNotExist:
            return JsonResponse({'success': False, 'error': '–ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    
    return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞'})

@login_required
def user_management(request):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    birthday_filter = request.GET.get('birthday_filter', '')
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
    students_query = User.objects.filter(role='student').select_related('profile', 'group', 'parent', 'city')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–µ –≥–ª–∞–≤–Ω—ã–π —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if hasattr(request.user, 'city') and request.user.city and request.user.role == 'city_admin':
        students_query = students_query.filter(city=request.user.city)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è
    if birthday_filter == 'this_month':
        from datetime import datetime, timedelta
        now = datetime.now()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        students_query = students_query.filter(
            birth_date__month=now.month,
            birth_date__isnull=False
        ).order_by('birth_date__day')
    elif birthday_filter == 'next_month':
        from datetime import datetime, timedelta
        now = datetime.now()
        next_month = now.month + 1 if now.month < 12 else 1
        next_year = now.year if now.month < 12 else now.year + 1
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ
        students_query = students_query.filter(
            birth_date__month=next_month,
            birth_date__year__lte=next_year,
            birth_date__isnull=False
        ).order_by('birth_date__day')
    else:
        students_query = students_query.order_by('username')
    
    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'create_user':
            username = request.POST.get('username')
            email = request.POST.get('email')
            password = request.POST.get('password')
            role = request.POST.get('role')
            group_id = request.POST.get('group')
            city_id = request.POST.get('city')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
                user = User.objects.create_user(
                    username=username,
                    email=email,
                    password=password,
                    role=role
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π)
                if city_id:
                    try:
                        city = City.objects.get(id=city_id)
                        user.city = city
                    except City.DoesNotExist:
                        user.delete()
                        messages.error(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                        return redirect('user_management')
                elif hasattr(request.user, 'city') and request.user.city and request.user.role == 'city_admin':
                    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≥–æ—Ä–æ–¥
                    user.city = request.user.city
                    messages.info(request, f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –≥–æ—Ä–æ–¥: {user.city.name}')
                else:
                    # –ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
                    if not request.user.is_superuser:
                        user.delete()
                        messages.error(request, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                        return redirect('user_management')
                
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_superuser
                if role == 'city_admin':
                    user.is_superuser = True
                    user.is_staff = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ —Ä–æ–ª–∏
                user.save()
                
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—á–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ cities (ManyToMany)
                if role == 'teacher' and user.city:
                    user.cities.add(user.city)
                
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—á–µ–Ω–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if role == 'student':
                    birth_day = request.POST.get('birth_day')
                    birth_month = request.POST.get('birth_month')
                    birth_year = request.POST.get('birth_year')
                    parent_id = request.POST.get('parent')
                    
                    if not birth_day or not birth_month or not birth_year:
                        user.delete()
                        messages.error(request, '–î–ª—è —É—á–µ–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥)')
                        return redirect('user_management')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    try:
                        from datetime import date
                        birth_date = date(int(birth_year), int(birth_month), int(birth_day))
                        user.birth_date = birth_date
                    except ValueError:
                        user.delete()
                        messages.error(request, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
                        return redirect('user_management')
                    
                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
                    if parent_id:
                        try:
                            parent = Parent.objects.get(id=parent_id)
                            user.parent = parent
                        except Parent.DoesNotExist:
                            messages.warning(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    
                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
                    if group_id:
                        try:
                            group = Group.objects.get(id=group_id)
                            user.group = group
                        except Group.DoesNotExist:
                            messages.warning(request, '–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                    
                    user.save()
                
                messages.success(request, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}')
        
        elif action == 'edit_user':
            user_id = request.POST.get('user_id')
            username = request.POST.get('username')
            email = request.POST.get('email')
            role = request.POST.get('role')
            group_id = request.POST.get('group')
            
            try:
                user = User.objects.get(id=user_id)
                user.username = username
                user.email = email
                user.role = role
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if role == 'city_admin':
                    user.is_superuser = True
                    user.is_staff = True
                else:
                    user.is_superuser = False
                    user.is_staff = False
                
                if role == 'student':
                    birth_day = request.POST.get('birth_day')
                    birth_month = request.POST.get('birth_month')
                    birth_year = request.POST.get('birth_year')
                    parent_id = request.POST.get('parent')
                    balance = request.POST.get('balance')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                    if birth_day and birth_month and birth_year:
                        try:
                            from datetime import date
                            birth_date = date(int(birth_year), int(birth_month), int(birth_day))
                            user.birth_date = birth_date
                        except ValueError:
                            messages.error(request, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
                            return redirect('user_management')
                    elif not birth_day or not birth_month or not birth_year:
                        messages.error(request, '–î–ª—è —É—á–µ–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥)')
                        return redirect('user_management')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
                    if parent_id:
                        try:
                            parent = Parent.objects.get(id=parent_id)
                            user.parent = parent
                        except Parent.DoesNotExist:
                            messages.warning(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
                            user.parent = None
                    else:
                        user.parent = None
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    if balance is not None and balance != '':
                        try:
                            new_balance = int(balance)
                            if new_balance >= 0:
                                profile = Profile.objects.get_or_create(user=user)[0]
                                old_balance = profile.astrocoins
                                profile.astrocoins = new_balance
                                profile.save()
                                
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                                if old_balance != new_balance:
                                    Transaction.objects.create(
                                        sender=request.user,
                                        receiver=user,
                                        amount=abs(new_balance - old_balance),
                                        transaction_type='EARN' if new_balance > old_balance else 'SPEND',
                                        description=f'–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–±—ã–ª–æ: {old_balance}, —Å—Ç–∞–ª–æ: {new_balance})'
                                    )
                            else:
                                messages.error(request, '–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
                                return redirect('user_management')
                        except ValueError:
                            messages.error(request, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞')
                            return redirect('user_management')
                    
                    if group_id:
                        group = Group.objects.get(id=group_id)
                        user.group = group
                    else:
                        user.group = None
                elif role == 'city_admin':
                    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –∏–º–µ—é—Ç –ø–æ–ª–µ–π —É—á–µ–Ω–∏–∫–∞
                    user.birth_date = None
                    user.parent_full_name = ''
                    user.parent_phone = ''
                    user.group = None
                else:
                    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ø–æ–ª–µ–π —É—á–µ–Ω–∏–∫–∞
                    user.birth_date = None
                    user.parent_full_name = ''
                    user.parent_phone = ''
                    user.group = None
                
                user.save()
                messages.success(request, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}')
        
        elif action == 'delete_user':
            user_id = request.POST.get('user_id')
            try:
                user = User.objects.get(id=user_id)
                username = user.username
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                teaching_groups = Group.objects.filter(teacher=user, is_active=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∫—É—Ä–∞—Ç–æ—Ä
                curated_groups = Group.objects.filter(curator=user, is_active=True)
                
                if teaching_groups.exists() or curated_groups.exists():
                    groups_info = []
                    if teaching_groups.exists():
                        teaching_list = [f'"{group.name}"' for group in teaching_groups]
                        groups_info.append(f"–ø—Ä–µ–ø–æ–¥–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö: {', '.join(teaching_list)}")
                    
                    if curated_groups.exists():
                        curated_list = [f'"{group.name}"' for group in curated_groups]
                        groups_info.append(f"–∫—É—Ä–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã: {', '.join(curated_list)}")
                    
                    groups_text = '; '.join(groups_info)
                    
                    messages.error(request, 
                        f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω {groups_text}. '
                        f'–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á—å—Ç–µ –≥—Ä—É–ø–ø—ã –¥—Ä—É–≥–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é/–∫—É—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –≥—Ä—É–ø–ø—ã.')
                    return redirect('user_management')
                
                user.delete()
                messages.success(request, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}')

        elif action == 'create_group':
            name = request.POST.get('name')
            teacher_id = request.POST.get('teacher')
            curator_id = request.POST.get('curator')
            description = request.POST.get('description')
            
            try:
                teacher = User.objects.get(id=teacher_id, role__in=['teacher', 'city_admin'])
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
                curator = None
                if curator_id:
                    try:
                        curator = User.objects.get(id=curator_id, role='city_admin')
                    except User.DoesNotExist:
                        messages.warning(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞')
                
                group = Group.objects.create(
                    name=name,
                    description=description,
                    teacher=teacher,
                    curator=curator
                )
                
                teacher_name = teacher.get_full_name() or teacher.username
                curator_info = ""
                if curator:
                    curator_name = curator.get_full_name() or curator.username
                    curator_info = f", –∫—É—Ä–∞—Ç–æ—Ä: {curator_name}"
                
                messages.success(request, f'–ì—Ä—É–ø–ø–∞ {name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}{curator_info})')
            except User.DoesNotExist:
                messages.error(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {str(e)}')

        elif action == 'edit_group':
            group_id = request.POST.get('group_id')
            name = request.POST.get('name')
            teacher_id = request.POST.get('teacher')
            
            try:
                group = Group.objects.get(id=group_id)
                teacher = User.objects.get(id=teacher_id, role__in=['teacher', 'city_admin'])
                
                group.name = name
                group.teacher = teacher
                group.save()
                
                messages.success(request, f'–ì—Ä—É–ø–ø–∞ {name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
            except Group.DoesNotExist:
                messages.error(request, '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            except User.DoesNotExist:
                messages.error(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {str(e)}')

        elif action == 'delete_group':
            group_id = request.POST.get('group_id')
            try:
                group = Group.objects.get(id=group_id)
                name = group.name
                
                # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –æ—Ç –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                User.objects.filter(group=group).update(group=None)
                
                group.delete()
                messages.success(request, f'–ì—Ä—É–ø–ø–∞ {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {str(e)}')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∏—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø—ã –ø–æ –≥–æ—Ä–æ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if hasattr(request.user, 'city') and request.user.city and request.user.role == 'city_admin':
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤–∏–¥–∏—Ç:
        # 1. –£—á–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ (ManyToMany cities) –ò–õ–ò –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (ForeignKey city)
        teachers_query = User.objects.filter(
            Q(role__in=['teacher', 'city_admin'], cities=request.user.city) |  # –£—á–∏—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤ –≥–æ—Ä–æ–¥–µ
            Q(role='city_admin', city=request.user.city)  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        ).distinct().order_by('username')
        
        # 2. –í–°–ï –≥—Ä—É–ø–ø—ã –≤ —à–∫–æ–ª–∞—Ö —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —Å–æ–∑–¥–∞–ª)
        groups_query = Group.objects.filter(school__city=request.user.city).select_related('teacher', 'school')
        
        # 3. –†–æ–¥–∏—Ç–µ–ª–µ–π —É—á–µ–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        parents_query = Parent.objects.filter(students__city=request.user.city).distinct().order_by('full_name')
    else:
        # –ì–ª–∞–≤–Ω—ã–π —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö
        teachers_query = User.objects.filter(role__in=['teacher', 'city_admin']).order_by('username')
        groups_query = Group.objects.all().select_related('teacher', 'school')
        parents_query = Parent.objects.all().order_by('full_name')
    
    context = {
        'admins': User.objects.filter(role='city_admin').order_by('username'),
        'teachers': teachers_query,
        'students': students_query,
        'groups': groups_query,
        'parents': parents_query,
        'birthday_filter': birthday_filter,
        'cities': City.objects.all().order_by('name'),  # –î–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }
    return render(request, 'core/user_management.html', context)

@login_required
def add_category(request):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    
    if request.method == 'POST':
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥–æ—Ä–æ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            city = request.user.city if hasattr(request.user, 'city') and request.user.city else None
            if not city and not request.user.is_superuser:
                raise Exception("–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥")
            
            category = ProductCategory.objects.create(
                name=request.POST['name'],
                description=request.POST.get('description', ''),
                icon=request.POST.get('icon', 'fas fa-cube'),
                is_featured=request.POST.get('is_featured', False) == 'on',
                order=int(request.POST.get('order', 0)),
                city=city  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≥–æ—Ä–æ–¥—É
            )
            
            city_name = city.name if city else "–±–µ–∑ –≥–æ—Ä–æ–¥–∞"
            messages.success(request, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–æ—Ä–æ–¥: {city_name}')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}')
        
        return redirect('shop')

@login_required
def edit_category(request):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    
    if request.method == 'POST':
        try:
            category = ProductCategory.objects.get(id=request.POST['category_id'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
            if (request.user.role == 'city_admin' and 
                hasattr(request.user, 'city') and request.user.city and 
                category.city != request.user.city):
                raise PermissionDenied("–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞")
            
            category.name = request.POST['name']
            category.description = request.POST.get('description', '')
            category.icon = request.POST.get('icon', 'fas fa-cube')
            category.is_featured = request.POST.get('is_featured', False) == 'on'
            category.order = int(request.POST.get('order', 0))
            category.save()
            
            city_name = category.city.name if category.city else "–±–µ–∑ –≥–æ—Ä–æ–¥–∞"
            messages.success(request, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city_name}')
        except ProductCategory.DoesNotExist:
            messages.error(request, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        except PermissionDenied as e:
            messages.error(request, str(e))
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}')
        
        return redirect('shop')

@login_required
def delete_category(request):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    
    if request.method == 'POST':
        try:
            category = ProductCategory.objects.get(id=request.POST['category_id'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
            if (request.user.role == 'city_admin' and 
                hasattr(request.user, 'city') and request.user.city and 
                category.city != request.user.city):
                raise PermissionDenied("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞")
            
            category_name = category.name
            city_name = category.city.name if category.city else "–±–µ–∑ –≥–æ—Ä–æ–¥–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category.products.exists():
                messages.error(request, f'–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category_name}", —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã')
            else:
                category.delete()
                messages.success(request, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}" –∏–∑ –≥–æ—Ä–æ–¥–∞ {city_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
        except ProductCategory.DoesNotExist:
            messages.error(request, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        except PermissionDenied as e:
            messages.error(request, str(e))
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}')
        
        return redirect('shop')

@login_required
def get_category(request, category_id):
    if not (request.user.is_superuser or request.user.role == 'city_admin'):
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    try:
        category = ProductCategory.objects.get(id=category_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        if (request.user.role == 'city_admin' and 
            hasattr(request.user, 'city') and request.user.city and 
            category.city != request.user.city):
            return JsonResponse({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}, status=403)
        
        data = {
            'id': category.id,
            'name': category.name,
            'description': category.description,
            'icon': category.icon,
            'is_featured': category.is_featured,
            'order': category.order,
            'city': category.city.id if category.city else None
        }
        return JsonResponse(data)
    except ProductCategory.DoesNotExist:
        return JsonResponse({'error': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=404)


# ===============================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–î–ò–¢–ï–õ–Ø–ú–ò
# ===============================

@login_required
def parent_management(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ—Ç–µ–π
    parents = Parent.objects.all().order_by('full_name')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    search_query = request.GET.get('search', '')
    if search_query:
        parents = parents.filter(
            Q(full_name__icontains=search_query) |
            Q(phone__icontains=search_query) |
            Q(email__icontains=search_query) |
            Q(work_place__icontains=search_query)
        )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(parents, 20)  # 20 —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_number = request.GET.get('page')
    parents_page = paginator.get_page(page_number)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–Ω–∏—è
    students_without_parents = User.objects.filter(role='student', parent__isnull=True).order_by('first_name', 'last_name', 'username')
    
    context = {
        'parents': parents_page,
        'search_query': search_query,
        'students_without_parents': students_without_parents,
        'total_parents': Parent.objects.count(),
        'students_with_parents': User.objects.filter(role='student', parent__isnull=False).count(),
        'students_without_parents_count': students_without_parents.count(),
    }
    
    return render(request, 'core/parent_management.html', context)


@login_required
def create_parent(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
    
    if request.method == 'POST':
        form = CreateParentWithStudentForm(request.POST)
        if form.is_valid():
            try:
                parent = form.save()
                student = form.cleaned_data.get('student')
                if student:
                    messages.success(
                        request, 
                        f'–†–æ–¥–∏—Ç–µ–ª—å "{parent.full_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–Ω–∏–∫—É {student.get_full_name() or student.username}'
                    )
                else:
                    messages.success(request, f'–†–æ–¥–∏—Ç–µ–ª—å "{parent.full_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
                return redirect('parent_management')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è: {str(e)}')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{form.fields[field].label}: {error}')
    
    return redirect('parent_management')


@login_required
def edit_parent(request, parent_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
    
    parent = get_object_or_404(Parent, id=parent_id)
    
    if request.method == 'POST':
        form = ParentForm(request.POST, instance=parent)
        if form.is_valid():
            try:
                form.save()
                messages.success(request, f'–î–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è "{parent.full_name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{form.fields[field].label}: {error}')
    
    return redirect('parent_management')


@login_required
def delete_parent(request, parent_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
    
    if request.method == 'POST':
        parent = get_object_or_404(Parent, id=parent_id)
        parent_name = parent.full_name
        students_count = parent.students_count
        
        try:
            parent.delete()
            if students_count > 0:
                messages.success(
                    request, 
                    f'–†–æ–¥–∏—Ç–µ–ª—å "{parent_name}" —É–¥–∞–ª–µ–Ω. {students_count} —É—á–µ–Ω–∏–∫(–æ–≤) –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é.'
                )
            else:
                messages.success(request, f'–†–æ–¥–∏—Ç–µ–ª—å "{parent_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è: {str(e)}')
    
    return redirect('parent_management')


@login_required
def link_student_parent(request):
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ —É—á–µ–Ω–∏–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º")
    
    if request.method == 'POST':
        student_id = request.POST.get('student_id')
        parent_id = request.POST.get('parent_id')
        
        try:
            student = get_object_or_404(User, id=student_id, role='student')
            parent = get_object_or_404(Parent, id=parent_id)
            
            old_parent = student.parent
            student.parent = parent
            student.save()
            
            if old_parent:
                messages.success(
                    request,
                    f'–£—á–µ–Ω–∏–∫ {student.get_full_name() or student.username} –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω —Å "{old_parent.full_name}" –Ω–∞ "{parent.full_name}"'
                )
            else:
                messages.success(
                    request,
                    f'–£—á–µ–Ω–∏–∫ {student.get_full_name() or student.username} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–¥–∏—Ç–µ–ª—é "{parent.full_name}"'
                )
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ: {str(e)}')
    
    return redirect('parent_management')


@login_required
def unlink_student_parent(request, student_id):
    """
    –û—Ç–≤—è–∑–∫–∞ —É—á–µ–Ω–∏–∫–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–≤—è–∑—ã–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
    
    if request.method == 'POST':
        student = get_object_or_404(User, id=student_id, role='student')
        
        try:
            parent_name = student.parent.full_name if student.parent else None
            student.parent = None
            student.save()
            
            if parent_name:
                messages.success(
                    request,
                    f'–£—á–µ–Ω–∏–∫ {student.get_full_name() or student.username} –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è "{parent_name}"'
                )
            else:
                messages.info(request, f'–£ —É—á–µ–Ω–∏–∫–∞ {student.get_full_name() or student.username} –Ω–µ –±—ã–ª–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ: {str(e)}')
    
    return redirect('parent_management')


@login_required
def get_parent_data(request, parent_id):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è (–¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    if not request.user.is_superuser:
        return JsonResponse({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}, status=403)
    
    try:
        parent = Parent.objects.get(id=parent_id)
        data = {
            'id': parent.id,
            'full_name': parent.full_name,
            'phone': parent.phone,
            'email': parent.email,
            'address': parent.address,
            'work_place': parent.work_place,
            'notes': parent.notes,
            'students': [
                {
                    'id': student.id,
                    'name': student.get_full_name() or student.username,
                    'username': student.username
                }
                for student in parent.students.all()
            ]
        }
        return JsonResponse(data)
    except Parent.DoesNotExist:
        return JsonResponse({'error': '–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)


# ===============================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ö–û–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–û–ô
# ===============================

@login_required
def city_management(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ–¥–∞–º–∏")
    
    cities = City.objects.all().order_by('name')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    search_query = request.GET.get('search', '')
    if search_query:
        cities = cities.filter(name__icontains=search_query)
    
    context = {
        'cities': cities,
        'search_query': search_query,
        'total_cities': City.objects.count(),
        'total_schools': School.objects.count(),
    }
    
    return render(request, 'core/city_management.html', context)


@login_required
def create_city(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞")
    
    if request.method == 'POST':
        form = CityForm(request.POST)
        if form.is_valid():
            try:
                city = form.save()
                messages.success(request, f'–ì–æ—Ä–æ–¥ "{city.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
                return redirect('city_management')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {str(e)}')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{form.fields[field].label}: {error}')
    
    return redirect('city_management')


@login_required
def school_management(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —à–∫–æ–ª–∞–º–∏")
    
    schools = School.objects.all().select_related('city').order_by('city__name', 'name')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    search_query = request.GET.get('search', '')
    if search_query:
        schools = schools.filter(
            Q(name__icontains=search_query) |
            Q(city__name__icontains=search_query) |
            Q(director__icontains=search_query) |
            Q(representative__icontains=search_query) |
            Q(address__icontains=search_query) |
            Q(phone__icontains=search_query)
        )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
    city_filter = request.GET.get('city')
    if city_filter:
        schools = schools.filter(city_id=city_filter)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(schools, 10)  # 10 —à–∫–æ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_number = request.GET.get('page')
    schools_page = paginator.get_page(page_number)
    
    context = {
        'schools': schools_page,
        'search_query': search_query,
        'city_filter': city_filter,
        'cities': City.objects.all().order_by('name'),
        'total_schools': School.objects.count(),
        'total_courses': Course.objects.count(),
        'total_groups': Group.objects.count(),
    }
    
    return render(request, 'core/school_management.html', context)


@login_required
def create_school(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —à–∫–æ–ª—ã
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —à–∫–æ–ª—ã")
    
    if request.method == 'POST':
        form = SchoolForm(request.POST)
        if form.is_valid():
            try:
                school = form.save()
                messages.success(request, f'–®–∫–æ–ª–∞ "{school.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                return redirect('school_management')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∫–æ–ª—ã: {str(e)}')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{form.fields[field].label}: {error}')
    
    return redirect('school_management')


@login_required
def school_detail(request, school_id):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —à–∫–æ–ª—ã —Å –∫—É—Ä—Å–∞–º–∏
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —à–∫–æ–ª")
    
    school = get_object_or_404(School, id=school_id)
    courses = school.courses.all().order_by('-is_active', 'name')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
    search_query = request.GET.get('search', '')
    if search_query:
        courses = courses.filter(
            Q(name__icontains=search_query) |
            Q(description__icontains=search_query)
        )
    
    context = {
        'school': school,
        'courses': courses,
        'search_query': search_query,
        'active_courses_count': school.courses.filter(is_active=True).count(),
        'inactive_courses_count': school.courses.filter(is_active=False).count(),
        'groups_count': school.groups.count(),
    }
    
    return render(request, 'core/school_detail.html', context)


@login_required
def create_course(request, school_id):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è —à–∫–æ–ª—ã
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å—ã")
    
    school = get_object_or_404(School, id=school_id)
    
    if request.method == 'POST':
        form = QuickCourseForm(request.POST)
        if form.is_valid():
            try:
                course = form.save(school)
                messages.success(request, f'–ö—É—Ä—Å "{course.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
                return redirect('school_detail', school_id=school.id)
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{form.fields[field].label}: {error}')
    
    return redirect('school_detail', school_id=school.id)


@login_required
def edit_course(request, course_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã")
    
    course = get_object_or_404(Course, id=course_id)
    
    if request.method == 'POST':
        form = CourseForm(request.POST, instance=course)
        if form.is_valid():
            try:
                form.save()
                messages.success(request, f'–ö—É—Ä—Å "{course.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{form.fields[field].label}: {error}')
    
    return redirect('school_detail', school_id=course.school.id)


@login_required
def delete_course(request, course_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
    """
    if not request.user.is_superuser:
        from django.core.exceptions import PermissionDenied
        raise PermissionDenied("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∫—É—Ä—Å—ã")
    
    if request.method == 'POST':
        course = get_object_or_404(Course, id=course_id)
        school_id = course.school.id
        course_name = course.name
        groups_count = course.groups.count()
        
        try:
            course.delete()
            if groups_count > 0:
                messages.success(
                    request, 
                    f'–ö—É—Ä—Å "{course_name}" —É–¥–∞–ª–µ–Ω. {groups_count} –≥—Ä—É–ø–ø–∞(–≥—Ä—É–ø–ø) —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–∞.'
                )
            else:
                messages.success(request, f'–ö—É—Ä—Å "{course_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}')
        
        return redirect('school_detail', school_id=school_id)
    
    return redirect('school_management')





@login_required
def get_courses_by_school(request, school_id):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –ø–æ —à–∫–æ–ª–µ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ö)
    """
    try:
        school = School.objects.get(id=school_id)
        courses = school.courses.filter(is_active=True).order_by('name')
        data = {
            'courses': [
                {
                    'id': course.id,
                    'name': course.name,
                    'description': course.description,
                    'duration_hours': course.duration_hours
                }
                for course in courses
            ]
        }
        return JsonResponse(data)
    except School.DoesNotExist:
        return JsonResponse({'error': '–®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=404)


@login_required
def get_group_students(request, group_id):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    """
    try:
        group = Group.objects.get(id=group_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ª–∏–±–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –ª–∏–±–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not (request.user.is_superuser or 
                (request.user.is_teacher and group.teacher == request.user)):
            return JsonResponse({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}, status=403)
        
        students = group.students.all().order_by('last_name', 'first_name', 'username')
        data = {
            'students': [
                {
                    'id': student.id,
                    'username': student.username,
                    'full_name': student.get_full_name() or student.username,
                    'first_name': student.first_name,
                    'last_name': student.last_name,
                    'astrocoins': student.profile.astrocoins,
                    'email': student.email,
                    'date_joined': student.date_joined.strftime('%d.%m.%Y'),
                }
                for student in students
            ],
            'group_name': group.name,
            'total_students': students.count()
        }
        return JsonResponse(data)
    except Group.DoesNotExist:
        return JsonResponse({'error': '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=404)


# ===============================
# –ö–ê–°–¢–û–ú–ù–´–ï –°–¢–†–ê–ù–ò–¶–´ –û–®–ò–ë–û–ö
# ===============================

def custom_page_not_found_view(request, exception):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 404"""
    return render(request, '404.html', status=404)

def custom_server_error_view(request):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 500"""
    return render(request, '500.html', status=500)

def custom_permission_denied_view(request, exception):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 403"""
    return render(request, '403.html', status=403)


@login_required
def get_courses_by_school(request, school_id):
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –ø–æ —à–∫–æ–ª–µ
    """
    try:
        school = School.objects.get(id=school_id)
        courses = Course.objects.filter(school=school, is_active=True).order_by('name')
        
        courses_data = []
        for course in courses:
            courses_data.append({
                'id': course.id,
                'name': course.name,
                'description': course.description,
            })
        
        return JsonResponse({
            'success': True,
            'courses': courses_data
        })
    
    except School.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': '–®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })


@login_required
def get_group_students(request, group_id):
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    """
    try:
        group = Group.objects.get(id=group_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not (request.user.is_superuser or 
                (request.user.is_teacher() and group.teacher == request.user)):
            return JsonResponse({
                'success': False,
                'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–µ–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã'
            })
        
        students = User.objects.filter(group=group, role='student').order_by('username')
        
        students_data = []
        for student in students:
            students_data.append({
                'id': student.id,
                'username': student.username,
                'full_name': student.get_full_name() or student.username,
                'email': student.email,
                'astrocoins': student.profile.astrocoins if hasattr(student, 'profile') else 0,
                'date_joined': student.date_joined.strftime('%d.%m.%Y'),
            })
        
        return JsonResponse({
            'success': True,
            'group_name': group.name,
            'total_students': len(students_data),
            'students': students_data
        })
    
    except Group.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })