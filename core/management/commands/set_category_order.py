from django.core.management.base import BaseCommand
from core.models import ProductCategory


class Command(BaseCommand):
    help = 'Set the display order for product categories'

    def handle(self, *args, **options):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–µ–ª–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_order = [
            "–ö–æ–≤—Ä–∏–∫–∏ –¥–ª—è –º—ã—à–∏",
            "–ë—Ä–∞—Å–ª–µ—Ç—ã", 
            "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏",
            "–ü–æ–ø—Å–æ–∫–µ—Ç—ã",
            "–ë—É—Ç—ã–ª–∫–∏ –∏ —Å—Ç–∞–∫–∞–Ω—ã",
            "–†—é–∫–∑–∞–∫–∏ –∏ —Å—É–º–∫–∏",
            "–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã",
            "–ù–∞–∫–ª–µ–π–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∫–∏",
            "–ò–ó —Å –ø–µ–¥–∞–≥–æ–≥–æ–º",
            "–í–∫—É—Å–Ω—è—à–∫–∏",
            "–ß–∞—Å—ã",
            "–ò–≥—Ä—ã",
            "–û–¥–µ–∂–¥–∞",
            "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
            "USB –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
            "–ó–Ω–∞—á–∫–∏ –∏ –±–µ–π–¥–∂–∏",
        ]

        self.stdout.write("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        updated_count = 0
        not_found_count = 0
        
        for index, category_name in enumerate(category_order, start=1):
            try:
                category = ProductCategory.objects.get(name=category_name)
                category.order = index * 10  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–æ–∫
                category.save()
                
                self.stdout.write(f"‚úÖ {index:2d}. {category_name} (order={category.order})")
                updated_count += 1
                
            except ProductCategory.DoesNotExist:
                self.stdout.write(f"‚ùå {index:2d}. {category_name} - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                not_found_count += 1

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        remaining_categories = ProductCategory.objects.exclude(
            name__in=category_order
        ).order_by('name')
        
        if remaining_categories.exists():
            self.stdout.write("\nüì¶ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            next_order = (len(category_order) + 1) * 10
            
            for category in remaining_categories:
                category.order = next_order
                category.save()
                self.stdout.write(f"‚úÖ {next_order//10:2d}. {category.name} (order={category.order})")
                next_order += 10
                updated_count += 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write("\n" + "="*60)
        self.stdout.write("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –£–°–¢–ê–ù–û–í–ö–ò –ü–û–†–Ø–î–ö–ê")
        self.stdout.write("="*60)
        self.stdout.write(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {updated_count}")
        self.stdout.write(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {not_found_count}")
        self.stdout.write(f"üì¶ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {ProductCategory.objects.count()}")
        
        if not_found_count > 0:
            self.stdout.write(f"\nüí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è")
            
        self.stdout.write("="*60)
        self.stdout.write("üéâ –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")