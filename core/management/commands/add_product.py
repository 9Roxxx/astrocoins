from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile
from core.models import Product, ProductCategory
import requests
import os
from urllib.parse import urlparse
import tempfile
from django.core.files import File


class Command(BaseCommand):
    help = 'Add a single product to the store'

    def add_arguments(self, parser):
        parser.add_argument('--name', type=str, required=True, help='Product name')
        parser.add_argument('--price', type=int, required=True, help='Product price in AC')
        parser.add_argument('--category', type=str, required=True, help='Product category')
        parser.add_argument('--stock', type=int, default=10, help='Stock quantity')
        parser.add_argument('--description', type=str, default='', help='Product description')
        parser.add_argument('--image-url', type=str, help='URL to product image')
        parser.add_argument('--digital', action='store_true', help='Is this a digital product?')
        parser.add_argument('--featured', action='store_true', help='Is this a featured product?')

    def handle(self, *args, **options):
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category, created = ProductCategory.objects.get_or_create(
            name=options['category'],
            defaults={'description': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {options["category"]}'}
        )
        
        if created:
            self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
        else:
            self.stdout.write(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: {category.name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
        existing_product = Product.objects.filter(name=options['name']).first()
        
        if existing_product:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
            existing_product.price = options['price']
            existing_product.stock = options['stock']
            existing_product.description = options['description'] or f"–¢–æ–≤–∞—Ä {options['name']} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∏"
            existing_product.category = category
            existing_product.is_digital = options['digital']
            existing_product.featured = options['featured']
            existing_product.save()
            
            product = existing_product
            self.stdout.write(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product.name}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            product = Product.objects.create(
                name=options['name'],
                price=options['price'],
                stock=options['stock'],
                description=options['description'] or f"–¢–æ–≤–∞—Ä {options['name']} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∏",
                category=category,
                is_digital=options['digital'],
                featured=options['featured'],
                available=True
            )
            self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product.name}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
        if options.get('image_url'):
            self.stdout.write(f"üñºÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            image_result = self.download_image(options['image_url'], product.name)
            
            if image_result:
                temp_file_path, filename = image_result
                try:
                    with open(temp_file_path, 'rb') as f:
                        product.image.save(filename, File(f), save=True)
                    self.stdout.write(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_file_path)
                except Exception as e:
                    self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    if os.path.exists(temp_file_path):
                        os.unlink(temp_file_path)

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        self.stdout.write("\n" + "="*50)
        self.stdout.write(f"üì¶ –¢–û–í–ê–† –î–û–ë–ê–í–õ–ï–ù")
        self.stdout.write("="*50)
        self.stdout.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}")
        self.stdout.write(f"–¶–µ–Ω–∞: {product.price} AC")
        self.stdout.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name}")
        self.stdout.write(f"–í –Ω–∞–ª–∏—á–∏–∏: {product.stock} —à—Ç.")
        self.stdout.write(f"–¢–∏–ø: {'–¶–∏—Ñ—Ä–æ–≤–æ–π' if product.is_digital else '–§–∏–∑–∏—á–µ—Å–∫–∏–π'}")
        self.stdout.write(f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–π: {'–î–∞' if product.featured else '–ù–µ—Ç'}")
        if product.image:
            self.stdout.write(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product.image.url}")
        self.stdout.write("="*50)

    def download_image(self, image_url, product_name):
        """–°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get(image_url, headers=headers, timeout=30)
            response.raise_for_status()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            parsed_url = urlparse(image_url)
            file_extension = os.path.splitext(parsed_url.path)[1] or '.jpg'
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            import re
            safe_name = re.sub(r'[^\w\s-]', '', product_name).strip()
            safe_name = re.sub(r'[-\s]+', '-', safe_name)
            filename = f"{safe_name}{file_extension}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as tmp_file:
                tmp_file.write(response.content)
                tmp_file.flush()
                
                return tmp_file.name, filename
                
        except Exception as e:
            self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
            return None