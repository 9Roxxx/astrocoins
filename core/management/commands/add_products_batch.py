from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile
from core.models import Product, ProductCategory
import requests
import os
import json
from urllib.parse import urlparse
import tempfile
from django.core.files import File
import re


class Command(BaseCommand):
    help = 'Add multiple products from JSON data'

    def add_arguments(self, parser):
        parser.add_argument('--json-file', type=str, help='Path to JSON file with products')
        parser.add_argument('--json-data', type=str, help='JSON string with products data')

    def handle(self, *args, **options):
        if options.get('json_file'):
            # –ß–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open(options['json_file'], 'r', encoding='utf-8') as f:
                    products_data = json.load(f)
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"))
                return
        elif options.get('json_data'):
            # –ß–∏—Ç–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏
            try:
                products_data = json.loads(options['json_data'])
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}"))
                return
        else:
            self.stdout.write(self.style.ERROR("–£–∫–∞–∂–∏—Ç–µ --json-file –∏–ª–∏ --json-data"))
            return

        if not isinstance(products_data, list):
            self.stdout.write(self.style.ERROR("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤"))
            return

        created_count = 0
        updated_count = 0
        error_count = 0

        for i, product_data in enumerate(products_data):
            try:
                self.stdout.write(f"\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {i+1}/{len(products_data)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not all(key in product_data for key in ['name', 'price', 'category']):
                    self.stdout.write(self.style.ERROR(f"‚ùå –¢–æ–≤–∞—Ä {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, price, category)"))
                    error_count += 1
                    continue

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category, cat_created = ProductCategory.objects.get_or_create(
                    name=product_data['category'],
                    defaults={'description': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {product_data["category"]}'}
                )
                
                if cat_created:
                    self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
                existing_product = Product.objects.filter(name=product_data['name']).first()
                
                if existing_product:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                    existing_product.price = product_data['price']
                    existing_product.stock = product_data.get('stock', 10)
                    existing_product.description = product_data.get('description', f"–¢–æ–≤–∞—Ä {product_data['name']} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∏")
                    existing_product.category = category
                    existing_product.is_digital = product_data.get('is_digital', False)
                    existing_product.featured = product_data.get('featured', False)
                    existing_product.save()
                    
                    product = existing_product
                    updated_count += 1
                    self.stdout.write(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {product.name} - {product.price} AC")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    product = Product.objects.create(
                        name=product_data['name'],
                        price=product_data['price'],
                        stock=product_data.get('stock', 10),
                        description=product_data.get('description', f"–¢–æ–≤–∞—Ä {product_data['name']} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∏"),
                        category=category,
                        is_digital=product_data.get('is_digital', False),
                        featured=product_data.get('featured', False),
                        available=True
                    )
                    created_count += 1
                    self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω: {product.name} - {product.price} AC")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
                if product_data.get('image_url'):
                    self.stdout.write(f"üñºÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {product.name}...")
                    image_result = self.download_image(product_data['image_url'], product.name)
                    
                    if image_result:
                        temp_file_path, filename = image_result
                        try:
                            with open(temp_file_path, 'rb') as f:
                                product.image.save(filename, File(f), save=True)
                            self.stdout.write(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                            
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            os.unlink(temp_file_path)
                        except Exception as e:
                            self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                            if os.path.exists(temp_file_path):
                                os.unlink(temp_file_path)

            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}"))
                error_count += 1

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write("\n" + "="*60)
        self.stdout.write(f"üéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù")
        self.stdout.write("="*60)
        self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {created_count}")
        self.stdout.write(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_count}")
        self.stdout.write(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        self.stdout.write(f"üì¶ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(products_data)}")
        self.stdout.write("="*60)

    def download_image(self, image_url, product_name):
        """–°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get(image_url, headers=headers, timeout=30)
            response.raise_for_status()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            parsed_url = urlparse(image_url)
            file_extension = os.path.splitext(parsed_url.path)[1] or '.jpg'
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            safe_name = re.sub(r'[^\w\s-]', '', product_name).strip()
            safe_name = re.sub(r'[-\s]+', '-', safe_name)
            filename = f"{safe_name}{file_extension}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as tmp_file:
                tmp_file.write(response.content)
                tmp_file.flush()
                
                return tmp_file.name, filename
                
        except Exception as e:
            self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
            return None