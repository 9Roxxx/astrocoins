from django.core.management.base import BaseCommand
from core.models import CoinAward
from django.db import connection

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏ CoinAward'

    def handle(self, *args, **options):
        self.stdout.write("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ CoinAward...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –º–æ–¥–µ–ª–∏
        fields = CoinAward._meta.get_fields()
        self.stdout.write(f"üìã –ü–æ–ª—è –º–æ–¥–µ–ª–∏ CoinAward:")
        for field in fields:
            self.stdout.write(f"   - {field.name}: {type(field).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'core_coinaward' ORDER BY ordinal_position;")
                db_fields = cursor.fetchall()
                
                self.stdout.write(f"\nüìä –ü–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
                for field_name, field_type in db_fields:
                    self.stdout.write(f"   - {field_name}: {field_type}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ student –∏–ª–∏ user
                field_names = [field[0] for field in db_fields]
                if 'student_id' in field_names:
                    self.stdout.write(self.style.SUCCESS("‚úÖ –ü–æ–ª–µ 'student_id' –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"))
                elif 'user_id' in field_names:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ 'user_id' –≤–º–µ—Å—Ç–æ 'student_id'"))
                    self.stdout.write("   –ù—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–ª—è!")
                else:
                    self.stdout.write(self.style.ERROR("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ 'student_id', –Ω–∏ 'user_id'"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç
        try:
            self.stdout.write("\nüß™ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞...")
            from core.models import User, AwardReason
            
            admin = User.objects.filter(is_superuser=True).first()
            student = User.objects.filter(role='student').first()
            reason = AwardReason.objects.first()
            
            if all([admin, student, reason]):
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç
                test_award = CoinAward(
                    student=student,
                    teacher=admin,
                    reason=reason,
                    amount=reason.coins,
                    comment="–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏"
                )
                # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è
                self.stdout.write(self.style.SUCCESS("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç CoinAward —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"))
                
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {e}"))
