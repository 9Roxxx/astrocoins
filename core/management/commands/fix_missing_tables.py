from django.core.management.base import BaseCommand
from django.db import connection
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
    
    def check_and_create_missing_tables(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        with connection.cursor() as cursor:
            self.stdout.write("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")
            existing_tables = [row[0] for row in cursor.fetchall()]
            
            self.stdout.write(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É core_user_cities
            if 'core_user_cities' not in existing_tables:
                self.stdout.write("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É core_user_cities...")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è many-to-many —Å–≤—è–∑–∏ User <-> City
                cursor.execute("""
                    CREATE TABLE "core_user_cities" (
                        "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
                        "user_id" integer NOT NULL REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED,
                        "city_id" integer NOT NULL REFERENCES "core_city" ("id") DEFERRABLE INITIALLY DEFERRED
                    )
                """)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                cursor.execute("""
                    CREATE INDEX "core_user_cities_user_id_idx" ON "core_user_cities" ("user_id")
                """)
                
                cursor.execute("""
                    CREATE INDEX "core_user_cities_city_id_idx" ON "core_user_cities" ("city_id")
                """)
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                cursor.execute("""
                    CREATE UNIQUE INDEX "core_user_cities_user_id_city_id_uniq" 
                    ON "core_user_cities" ("user_id", "city_id")
                """)
                
                self.stdout.write("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ core_user_cities —Å–æ–∑–¥–∞–Ω–∞")
            else:
                self.stdout.write("  ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ core_user_cities —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É core_product_available_cities
            if 'core_product_available_cities' not in existing_tables:
                self.stdout.write("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É core_product_available_cities...")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è many-to-many —Å–≤—è–∑–∏ Product <-> City
                cursor.execute("""
                    CREATE TABLE "core_product_available_cities" (
                        "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
                        "product_id" integer NOT NULL REFERENCES "core_product" ("id") DEFERRABLE INITIALLY DEFERRED,
                        "city_id" integer NOT NULL REFERENCES "core_city" ("id") DEFERRABLE INITIALLY DEFERRED
                    )
                """)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                cursor.execute("""
                    CREATE INDEX "core_product_available_cities_product_id_idx" ON "core_product_available_cities" ("product_id")
                """)
                
                cursor.execute("""
                    CREATE INDEX "core_product_available_cities_city_id_idx" ON "core_product_available_cities" ("city_id")
                """)
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                cursor.execute("""
                    CREATE UNIQUE INDEX "core_product_available_cities_product_id_city_id_uniq" 
                    ON "core_product_available_cities" ("product_id", "city_id")
                """)
                
                self.stdout.write("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ core_product_available_cities —Å–æ–∑–¥–∞–Ω–∞")
            else:
                self.stdout.write("  ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ core_product_available_cities —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            expected_tables = [
                'core_user_cities',
                'core_product_available_cities',
                'core_group_students',  # –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø–æ–∑–∂–µ
            ]
            
            missing_tables = []
            for table in expected_tables:
                if table not in existing_tables:
                    missing_tables.append(table)
            
            if missing_tables:
                self.stdout.write(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
            else:
                self.stdout.write("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    def clear_all_products(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with connection.cursor() as cursor:
            self.stdout.write("üóëÔ∏è  –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            cursor.execute("PRAGMA foreign_keys = OFF")
            
            try:
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä-–≥–æ—Ä–æ–¥ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='core_product_available_cities'")
                if cursor.fetchone():
                    cursor.execute("DELETE FROM core_product_available_cities")
                    self.stdout.write("  üßπ –û—á–∏—â–µ–Ω—ã —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä-–≥–æ—Ä–æ–¥")
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='core_purchase'")
                if cursor.fetchone():
                    cursor.execute("DELETE FROM core_purchase")
                    self.stdout.write("  üõí –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ–∫—É–ø–∫–∏")
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='core_product'")
                if cursor.fetchone():
                    cursor.execute("SELECT COUNT(*) FROM core_product")
                    product_count = cursor.fetchone()[0]
                    cursor.execute("DELETE FROM core_product")
                    self.stdout.write(f"  üì¶ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {product_count}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='core_productcategory'")
                if cursor.fetchone():
                    cursor.execute("SELECT COUNT(*) FROM core_productcategory")
                    category_count = cursor.fetchone()[0]
                    cursor.execute("DELETE FROM core_productcategory")
                    self.stdout.write(f"  üìÇ –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {category_count}")
                
            except Exception as e:
                self.stdout.write(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
            finally:
                # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
                cursor.execute("PRAGMA foreign_keys = ON")
    
    def handle(self, *args, **options):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü"""
        
        self.stdout.write(self.style.WARNING("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü..."))
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.check_and_create_missing_tables()
        
        # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        self.clear_all_products()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        with connection.cursor() as cursor:
            self.stdout.write("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É core_user_cities
            if True:  # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                cursor.execute("PRAGMA table_info(core_user_cities)")
                columns = cursor.fetchall()
                self.stdout.write(f"  üìã core_user_cities: {[col[1] for col in columns]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
            try:
                cursor.execute("SELECT COUNT(*) FROM core_user_cities")
                count = cursor.fetchone()[0]
                self.stdout.write(f"  üìä –ó–∞–ø–∏—Å–µ–π –≤ core_user_cities: {count}")
            except Exception as e:
                self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
        
        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stdout.write("\n" + "="*60)
        self.stdout.write(self.style.SUCCESS("üéä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"))
        self.stdout.write("="*60)
        
        self.stdout.write("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        self.stdout.write("  üóÑÔ∏è  –¢–∞–±–ª–∏—Ü–∞ core_user_cities —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        self.stdout.write("  üîó Many-to-many —Å–≤—è–∑—å User <-> City —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        self.stdout.write("  üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—è —Å–º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö")
        
        self.stdout.write("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
        self.stdout.write("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        self.stdout.write("  2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        self.stdout.write("  3. –ù–∞–∑–Ω–∞—á–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤")
        
        self.stdout.write(self.style.SUCCESS("\n‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!"))
