from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.utils.safestring import mark_safe
from .models import User, Profile, Transaction, Product, Purchase, ProductCategory, Group, Parent, City, School, Course

@admin.register(Parent)
class ParentAdmin(admin.ModelAdmin):
    list_display = ('full_name', 'phone', 'email', 'get_students_count', 'created_at')
    search_fields = ('full_name', 'phone', 'email', 'work_place')
    list_filter = ('created_at',)
    readonly_fields = ('created_at', 'updated_at', 'get_students_list')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('full_name', 'phone', 'email')
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('address', 'work_place', 'notes')
        }),
        ('–î–µ—Ç–∏', {
            'fields': ('get_students_list',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def get_students_count(self, obj):
        count = obj.students_count
        if count > 0:
            return f"{count} –¥–µ—Ç–µ–π"
        return "–ù–µ—Ç –¥–µ—Ç–µ–π"
    get_students_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π'

    def get_students_list(self, obj):
        students = obj.students.all()
        if students:
            student_links = []
            for student in students:
                url = f'/admin/core/user/{student.id}/change/'
                student_links.append(f'<a href="{url}" target="_blank">{student.get_full_name() or student.username}</a>')
            return mark_safe('<br>'.join(student_links))
        return '–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π'
    get_students_list.short_description = '–î–µ—Ç–∏'

@admin.register(User)
class CustomUserAdmin(UserAdmin):
    list_display = ('username', 'email', 'first_name', 'last_name', 'role', 'get_parent_info', 'is_staff')
    search_fields = ('username', 'email', 'first_name', 'last_name')
    list_filter = ('is_staff', 'is_active', 'role', 'groups')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {'fields': ('username', 'password')}),
        ('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {'fields': ('first_name', 'last_name', 'email')}),
        ('–†–æ–ª—å –∏ –≥—Ä—É–ø–ø–∞', {'fields': ('role', 'group')}),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞', {'fields': ('birth_date', 'parent')}),
        ('–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è', {
            'fields': ('parent_full_name', 'parent_phone'),
            'classes': ('collapse',),
            'description': '–≠—Ç–∏ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ "–†–æ–¥–∏—Ç–µ–ª—å" –≤—ã—à–µ.'
        }),
        ('–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã', {'fields': ('last_login', 'date_joined')}),
    )
    
    def get_parent_info(self, obj):
        if obj.parent:
            return f"{obj.parent.full_name}"
        elif obj.parent_full_name:
            return f"{obj.parent_full_name} (—Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)"
        return "–ù–µ —É–∫–∞–∑–∞–Ω"
    get_parent_info.short_description = '–†–æ–¥–∏—Ç–µ–ª—å'

@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'astrocoins', 'created_at')
    search_fields = ('user__username', 'user__email')
    list_filter = ('created_at',)
    fieldsets = (
        ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {'fields': ('user',)}),
        ('–ë–∞–ª–∞–Ω—Å', {'fields': ('astrocoins',)}),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {'fields': ('created_at',)}),
    )

@admin.register(Transaction)
class TransactionAdmin(admin.ModelAdmin):
    list_display = ('sender', 'receiver', 'amount', 'get_transaction_type_display', 'created_at')
    list_filter = ('transaction_type', 'created_at')
    search_fields = ('sender__username', 'receiver__username', 'description')
    
    def get_transaction_type_display(self, obj):
        types = {
            'TRANSFER': '–ü–µ—Ä–µ–≤–æ–¥',
            'PURCHASE': '–ü–æ–∫—É–ø–∫–∞',
            'EARN': '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ',
            'SPEND': '–°–ø–∏—Å–∞–Ω–∏–µ'
        }
        return types.get(obj.transaction_type, obj.transaction_type)
    get_transaction_type_display.short_description = '–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'

    fieldsets = (
        ('–£—á–∞—Å—Ç–Ω–∏–∫–∏', {
            'fields': ('sender', 'receiver')
        }),
        ('–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
            'fields': ('amount', 'transaction_type', 'description')
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',)
        }),
    )

@admin.register(ProductCategory)
class ProductCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'get_icon_display', 'get_featured_display', 'order', 'get_products_count')
    list_filter = ('is_featured',)
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    ordering = ('order', 'name')

    def get_featured_display(self, obj):
        return "üî• –ì–æ—Ä—è—á–∞—è" if obj.is_featured else "–û–±—ã—á–Ω–∞—è"
    get_featured_display.short_description = '–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'description')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('icon', 'order', 'is_featured')
        }),
    )

    def get_icon_display(self, obj):
        if obj.icon:
            return mark_safe(f'<i class="fas {obj.icon}"></i> {obj.icon}')
        return '-'
    get_icon_display.short_description = '–ò–∫–æ–Ω–∫–∞'

    def get_products_count(self, obj):
        return obj.products.count()
    get_products_count.short_description = '–¢–æ–≤–∞—Ä–æ–≤'

    class Media:
        css = {
            'all': ('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css',)
        }

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ('name', 'category', 'price', 'stock', 'get_availability_display', 'get_featured_display', 'get_type_display', 'get_image')
    list_filter = ('category', 'available', 'featured', 'is_digital', 'created_at')
    search_fields = ('name', 'description', 'category__name')
    readonly_fields = ('get_image',)
    prepopulated_fields = {'slug': ('name',)}
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'description', 'category', 'price')
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('image', 'get_image')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('available', 'stock', 'is_digital', 'featured')
        }),
    )

    def get_availability_display(self, obj):
        return "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if obj.available else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
    get_availability_display.short_description = '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'

    def get_featured_display(self, obj):
        return "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–π" if obj.featured else "–û–±—ã—á–Ω—ã–π"
    get_featured_display.short_description = '–°—Ç–∞—Ç—É—Å'

    def get_type_display(self, obj):
        return "üíª –¶–∏—Ñ—Ä–æ–≤–æ–π" if obj.is_digital else "üì¶ –§–∏–∑–∏—á–µ—Å–∫–∏–π"
    get_type_display.short_description = '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞'

    def get_image(self, obj):
        if obj.image:
            return mark_safe(f'<img src="{obj.image.url}" width="100" height="100" style="object-fit: cover; border-radius: 8px;" />')
        return '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    get_image.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'

@admin.register(Purchase)
class PurchaseAdmin(admin.ModelAdmin):
    list_display = ('user', 'product', 'quantity', 'total_price', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('user__username', 'product__name')
    fieldsets = (
        ('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∏ —Ç–æ–≤–∞—Ä', {
            'fields': ('user', 'product')
        }),
        ('–î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏', {
            'fields': ('quantity', 'total_price')
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',)
        }),
    )


@admin.register(City)
class CityAdmin(admin.ModelAdmin):
    list_display = ('name', 'get_schools_count', 'created_at')
    search_fields = ('name',)
    list_filter = ('created_at',)
    readonly_fields = ('created_at', 'get_schools_list')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name',)
        }),
        ('–®–∫–æ–ª—ã –≤ –≥–æ—Ä–æ–¥–µ', {
            'fields': ('get_schools_list',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )

    def get_schools_count(self, obj):
        count = obj.schools_count
        return f"{count} —à–∫–æ–ª" if count > 0 else "–ù–µ—Ç —à–∫–æ–ª"
    get_schools_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∫–æ–ª'

    def get_schools_list(self, obj):
        schools = obj.schools.all()
        if schools:
            school_links = []
            for school in schools:
                url = f'/admin/core/school/{school.id}/change/'
                school_links.append(f'<a href="{url}" target="_blank">{school.name}</a>')
            return mark_safe('<br>'.join(school_links))
        return '–ù–µ—Ç —à–∫–æ–ª –≤ –≥–æ—Ä–æ–¥–µ'
    get_schools_list.short_description = '–®–∫–æ–ª—ã'


@admin.register(School)
class SchoolAdmin(admin.ModelAdmin):
    list_display = ('name', 'city', 'director', 'phone', 'get_courses_count', 'get_groups_count', 'created_at')
    search_fields = ('name', 'director', 'representative', 'address', 'phone', 'email')
    list_filter = ('city', 'created_at')
    readonly_fields = ('created_at', 'get_courses_list', 'get_groups_list')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('city', 'name', 'director', 'representative')
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('address', 'phone', 'email', 'website')
        }),
        ('–ö—É—Ä—Å—ã', {
            'fields': ('get_courses_list',)
        }),
        ('–ì—Ä—É–ø–ø—ã', {
            'fields': ('get_groups_list',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )

    def get_courses_count(self, obj):
        count = obj.courses_count
        return f"{count} –∫—É—Ä—Å–æ–≤" if count > 0 else "–ù–µ—Ç –∫—É—Ä—Å–æ–≤"
    get_courses_count.short_description = '–ö—É—Ä—Å—ã'

    def get_groups_count(self, obj):
        count = obj.groups_count
        return f"{count} –≥—Ä—É–ø–ø" if count > 0 else "–ù–µ—Ç –≥—Ä—É–ø–ø"
    get_groups_count.short_description = '–ì—Ä—É–ø–ø—ã'

    def get_courses_list(self, obj):
        courses = obj.courses.all()
        if courses:
            course_links = []
            for course in courses:
                url = f'/admin/core/course/{course.id}/change/'
                status = "üü¢" if course.is_active else "üî¥"
                course_links.append(f'<a href="{url}" target="_blank">{status} {course.name}</a>')
            return mark_safe('<br>'.join(course_links))
        return '–ù–µ—Ç –∫—É—Ä—Å–æ–≤ –≤ —à–∫–æ–ª–µ'
    get_courses_list.short_description = '–ö—É—Ä—Å—ã'

    def get_groups_list(self, obj):
        groups = obj.groups.all()
        if groups:
            group_links = []
            for group in groups:
                url = f'/admin/core/group/{group.id}/change/'
                status = "üü¢" if group.is_active else "üî¥"
                group_links.append(f'<a href="{url}" target="_blank">{status} {group.name}</a>')
            return mark_safe('<br>'.join(group_links))
        return '–ù–µ—Ç –≥—Ä—É–ø–ø –≤ —à–∫–æ–ª–µ'
    get_groups_list.short_description = '–ì—Ä—É–ø–ø—ã'


@admin.register(Course)
class CourseAdmin(admin.ModelAdmin):
    list_display = ('name', 'school', 'duration_hours', 'get_groups_count', 'get_active_status', 'created_at')
    search_fields = ('name', 'description', 'school__name', 'school__city__name')
    list_filter = ('is_active', 'school__city', 'school', 'created_at')
    readonly_fields = ('created_at', 'get_groups_list')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('school', 'name', 'description')
        }),
        ('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—É—Ä—Å–∞', {
            'fields': ('duration_hours', 'is_active')
        }),
        ('–ì—Ä—É–ø–ø—ã –ø–æ –∫—É—Ä—Å—É', {
            'fields': ('get_groups_list',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )

    def get_active_status(self, obj):
        return "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π" if obj.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
    get_active_status.short_description = '–°—Ç–∞—Ç—É—Å'

    def get_groups_count(self, obj):
        count = obj.groups_count
        return f"{count} –≥—Ä—É–ø–ø" if count > 0 else "–ù–µ—Ç –≥—Ä—É–ø–ø"
    get_groups_count.short_description = '–ì—Ä—É–ø–ø—ã'

    def get_groups_list(self, obj):
        groups = obj.groups.all()
        if groups:
            group_links = []
            for group in groups:
                url = f'/admin/core/group/{group.id}/change/'
                status = "üü¢" if group.is_active else "üî¥"
                teacher = group.teacher.get_full_name() or group.teacher.username
                group_links.append(f'<a href="{url}" target="_blank">{status} {group.name}</a> (–ø—Ä–µ–ø: {teacher})')
            return mark_safe('<br>'.join(group_links))
        return '–ù–µ—Ç –≥—Ä—É–ø–ø –ø–æ —ç—Ç–æ–º—É –∫—É—Ä—Å—É'
    get_groups_list.short_description = '–ì—Ä—É–ø–ø—ã'